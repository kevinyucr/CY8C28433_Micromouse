;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: SAR10.asm
;;   Version: 2.00, Updated on 2012/9/21 at 11:56:25
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION: SAR10 User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "SAR10.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  SAR10_EnableInt
export _SAR10_EnableInt
export  SAR10_DisableInt
export _SAR10_DisableInt
export  SAR10_Start
export _SAR10_Start
export  SAR10_Stop
export _SAR10_Stop
export  SAR10_Trigger
export _SAR10_Trigger
export  SAR10_fIsDataAvailable
export _SAR10_fIsDataAvailable
export  SAR10_iGetData
export _SAR10_iGetData
export  SAR10_bGetData
export _SAR10_bGetData
export  SAR10_SetADCChannel
export _SAR10_SetADCChannel
export  SAR10_SetTriggerSrc
export _SAR10_SetTriggerSrc
export  SAR10_EnableAutoTrigger
export _SAR10_EnableAutoTrigger
export  SAR10_SetClk
export _SAR10_SetClk
export  SAR10_SetRunMode
export _SAR10_SetRunMode

AREA cy8c28433_micromouse_RAM (RAM,REL)

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------

;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------


AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_EnableInt
;
;  DESCRIPTION:
;     Enables the interrupt mode operation by setting the interrupt enable mask bit
;     associated with this User Module. This function has no effect until and
;     unless the global interrupts are enabled (for example by using the
;     macro M8C_EnableGInt).
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None.
;  RETURNS:      Nothing.
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_EnableInt:
_SAR10_EnableInt:
   RAM_PROLOGUE RAM_USE_CLASS_1
   SAR10_EnableInt_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_DisableInt
;
;  DESCRIPTION:
;     Disables the interrupt mode operation by clearing the interrupt enable
;     mask bit associated with this User Module.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_DisableInt:
_SAR10_DisableInt:
   RAM_PROLOGUE RAM_USE_CLASS_1
   SAR10_DisableInt_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_Start
;
;  DESCRIPTION:
;     Enables SAR operation. 
;     Set the ADC_EN bit in SAR_CR0 register
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_Start:
_SAR10_Start:
   RAM_PROLOGUE RAM_USE_CLASS_1
   M8C_SetBank1
   SAR10_Start_M
   M8C_SetBank0
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_Stop
;
;  DESCRIPTION:
;     Disables SAR operation 
;     Clear ADC_EN bit in SAR_CR0 register
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_Stop:
_SAR10_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   M8C_SetBank1
   SAR10_Stop_M
   M8C_SetBank0
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_Trigger
;
;  DESCRIPTION:
;     Trigger the SAR to sample for one time
;     Set START/ONGOING bit in SAR_CR0 register
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:   Nothing
;  RETURNS:         Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_Trigger:
_SAR10_Trigger:
   RAM_PROLOGUE RAM_USE_CLASS_1
   M8C_SetBank1
   or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
   M8C_SetBank0
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_fIsDataAvailable
;
;  DESCRIPTION:
;     Checks the availability of sampled data.
;     Get READY bit from SAR_CR0 register
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:   None
;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_fIsDataAvailable:
_SAR10_fIsDataAvailable:
   RAM_PROLOGUE RAM_USE_CLASS_4
   M8C_SetBank1
   mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
   M8C_SetBank0
   and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_iGetData
;
;  DESCRIPTION:
;     Returns last converted data.
;     SAR_DL will be read first, then the SAR_DH
;     The MSB is returned in X and the LSB in A
;     Note: this function returns correct result only in right-justify mode 
;     for CY8C28x45 device.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:   None
;  RETURNS:     fastcall16 INT iGetData(void)
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
   Temp_offs:         equ  -2
   DL_REG_offs:       equ  -1
        
 SAR10_iGetData:
_SAR10_iGetData:
   RAM_PROLOGUE RAM_USE_CLASS_2
IF(SAR10_Justify)  ; for CY8C28x45 Device
   mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
   push  A                                    ; Store 8 lowest bits in stack
   mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
   mov   X, A                                 ; Get MSB of result
   pop   A                                    ; Get LSB of result
ELSE ;for CY8C22x45 device
   mov   A, 0x00                              ; Init local var
   push  A                                    ; Reserve one byte in stack
   mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
   push  A                                    ; Store 2 lowest bits in stack
   mov   X, SP                                ; Set SP in X
   mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
   asl   A                                    ; Determine two highest bits and store it in stack
   rlc   [X+Temp_offs]
   asl   A
   rlc   [X+Temp_offs]
   or    A, [X+DL_REG_offs]                    ; Form LSB of result
   pop   X                                     
   pop   X                                     ; Get MSB of result
ENDIF
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_GetDataMSB8
;
;  DESCRIPTION:
;    Returns last converted data.
;    Note: this function returns correct result only in left-justify mode
;    for CY8C28x45 device.  
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    Nothing
;  RETURNS:          fastcall16 char GetDataMSB8(void)
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_bGetData:
_SAR10_bGetData:
   RAM_PROLOGUE RAM_USE_CLASS_1
   mov   A,reg[SAR10_SAR_DH_REG]
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_SelectADCChannel
;
;  DESCRIPTION:
;    Select the SAR input from 14 optional input channels.
;   Set ADC_CHS bits in SAR_CR0 register
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
;  RETURNS:    None
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_SetADCChannel:
_SAR10_SetADCChannel:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, SAR10_CHN_SEL_MASK
   mov   X, SP
   push  A                                     ; store value in stack
   M8C_SetBank1
   mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
   and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
   or    A, [X]                                ; set ADC_CHS bits
   mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
   M8C_SetBank0
   pop   A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_SelectTriggerSrc
;
;  DESCRIPTION:
;    Select the SAR10 auto-trigger source 
;    by setting TIGSEL in SAR_CR1
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
;  RETURNS:    None
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_SetTriggerSrc:
_SAR10_SetTriggerSrc:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, SAR10_TRG_SEL_MASK 
   mov   X, SP
   push  A                                    ; store value in stack
   M8C_SetBank1
   mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
   or    A, [X]                                ; set TIGSEL bits
   mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   M8C_SetBank0
   pop   A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_EnableAutoTrigger
;
;  DESCRIPTION:
;    Global enable CR of the SAR10 auto-trigger function by setting 
;    by setting ALIGN_EN in SAR_CR1
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
;  RETURNS:    None
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_EnableAutoTrigger:
_SAR10_EnableAutoTrigger:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, SAR10_ALIGN_EN_MASK
   mov   X, SP
   push  A                                    ; store value in stack
   M8C_SetBank1
   mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
   or    A, [X]                                ; set ALIGN_EN bits
   mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   M8C_SetBank0
   pop   A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_SetClk
;
;  DESCRIPTION:
;    Set SAR Sample Rate and Clock Selection 
;    by setting CLKSEL bits in SAR_CR1
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
;  RETURNS:    None
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_SetClk:
_SAR10_SetClk:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, SAR10_CLK_SEL_MASK
   mov   X, SP
   push  A                                    ; store value in stack
   M8C_SetBank1
   mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
   or    A, [X]                                ; set CLKSEL bits
   mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   M8C_SetBank0
   pop   A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: SAR10_SetRunMode
;
;  DESCRIPTION:
;    Set free-running mode for SAR
;    by setting FREERUN bits in SAR_CR2
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
;  RETURNS:    None
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 SAR10_SetRunMode:
_SAR10_SetRunMode:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, SAR10_FREE_RUN_MASK
   mov   X, SP
   push  A                                    ; store value in stack
   M8C_SetBank1
   mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
   and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
   or    A, [X]                                ; set FREERUN bits
   mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
   M8C_SetBank0
   pop   A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION
; End of File SAR10.asm
