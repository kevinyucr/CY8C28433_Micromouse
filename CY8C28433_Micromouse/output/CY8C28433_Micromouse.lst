FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting	
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 7F    JMP   0x0080             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0118)     ;---------------------------------------------------
                                        (0119)     ; Insert your custom code below this banner
                                        (0120)     ;---------------------------------------------------
                                        (0121) 
                                        (0122)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0123)     halt                           ;Stop execution if power falls too low
                                        (0124) 
                                        (0125)     org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                                        (0126)     // call	void_handler
0008: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                                        (0130)     // call	void_handler
000C: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                                        (0134)     // call	void_handler
0010: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                                        (0138)     // call	void_handler
0014: 7E       RETI                     (0139)     reti
                                        (0140)     
                                        (0141)     org   18h                      ;VC3 Interrupt Vector
                                        (0142)     // call	void_handler
0018: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0D E9 LJMP  PSoC_GPIO_ISR      (0146)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
                                        (0150)     // call	void_handler
0020: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
0024: 7D 07 AD LJMP  _Counter16_Tick_ISR(0154)     ljmp	_Counter16_Tick_ISR
0027: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
0028: 7D 05 B2 LJMP  _PWM8_Pump_ISR     (0158)     ljmp	_PWM8_Pump_ISR
002B: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
                                        (0162)     // call	void_handler
002C: 7E       RETI                     (0163)     reti
                                        (0164)     
                                        (0165)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
                                        (0170)     // call	void_handler
0034: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181) 	org   40h                      ;PSoC Block DBC20 Interrupt Vector
0040: 7D 05 24 LJMP  _PWM8_RightRev_ISR (0182)     ljmp	_PWM8_RightRev_ISR
0043: 7E       RETI                     (0183)     reti
                                        (0184) 	
                                        (0185) 	org   44h                      ;PSoC Block DBC21 Interrupt Vector
0044: 7D 05 B3 LJMP  _PWM8_LeftRev_ISR  (0186)     ljmp	_PWM8_LeftRev_ISR
0047: 7E       RETI                     (0187)     reti
                                        (0188) 	
                                        (0189) 	org   48h                      ;PSoC Block DCC22 Interrupt Vector
0048: 7D 05 6B LJMP  _PWM8_RightFwd_ISR (0190)     ljmp	_PWM8_RightFwd_ISR
004B: 7E       RETI                     (0191)     reti
                                        (0192) 	
                                        (0193) 	org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
004C: 7D 05 FA LJMP  _PWM8_LeftFwd_ISR  (0194)     ljmp	_PWM8_LeftFwd_ISR
004F: 7E       RETI                     (0195)     reti
                                        (0196) 	 
                                        (0197)     org   60h                      ;PSoC I2C0 Interrupt Vector
0060: 7D 06 41 LJMP  _EzI2Cs_ISR        (0198)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201) 	org   64h                      ;PSoC I2C1 Interrupt Vector
                                        (0202)     // call	void_handler
0064: 7E       RETI                     (0203)     reti
                                        (0204) 	
                                        (0205) 	org   68h                      ;PSoC SARADC Interrupt Vector
0068: 7D 04 7D LJMP  _SAR10_ISR         (0206)     ljmp	_SAR10_ISR
006B: 7E       RETI                     (0207)     reti
                                        (0208) 	
                                        (0209) 	org   6Ch                      ;PSoC RTC Interrupt Vector
                                        (0210)     // call	void_handler
006C: 7E       RETI                     (0211)     reti
                                        (0212) 	
                                        (0213) 	org   70h                      ;Analog Column 4 Interrupt Vector
                                        (0214)     // call	void_handler
0070: 7E       RETI                     (0215)     reti
                                        (0216) 	
                                        (0217) 	org   74h                      ;Analog Column 5 Interrupt Vector
                                        (0218)     // call	void_handler
0074: 7E       RETI                     (0219)     reti
                                        (0220) 	
                                        (0221)     org   7Ch                      ;Sleep Timer Interrupt Vector
007C: 7D 04 07 LJMP  _SleepTimer_ISR    (0222)     ljmp	_SleepTimer_ISR
007F: 7E       RETI                     (0223)     reti
0080: 71 10    OR    F,0x10             
                                        (0224)     ;---------------------------------------------------
                                        (0225)     ; Insert your custom code above this banner
                                        (0226)     ;---------------------------------------------------
                                        (0227)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0228) 
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  Start of Execution.
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0233) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0234) ;
                                        (0235) 
                                        (0236) IF	(TOOLCHAIN & HITECH)
                                        (0237)  	AREA PD_startup(CODE, REL, CON)
                                        (0238) ELSE
                                        (0239)     org 80h
                                        (0240) ENDIF
                                        (0241) __Start:
                                        (0242) 
                                        (0243)     ; initialize SMP values for voltage stabilization, if required,
                                        (0244)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0245)     ; least for now. 
                                        (0246)     ;
                                        (0247)     M8C_SetBank1
0082: 62 E3 81 MOV   REG[0xE3],0x81     (0248)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0085: 70 EF    AND   F,0xEF             
0087: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250) 
                                        (0251) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0252) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0253)     M8C_EnableWatchDog
                                        (0254) ENDIF
                                        (0255) 
                                        (0256) IF ( SELECT_32K )
                                        (0257)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0258) ELSE
008A: 41 FE FB AND   REG[0xFE],0xFB     (0259)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0260) ENDIF
                                        (0261) 
                                        (0262)     ;---------------------------
                                        (0263)     ; Set up the Temporary stack
                                        (0264)     ;---------------------------
                                        (0265)     ; A temporary stack is set up for the SSC instructions.
                                        (0266)     ; The real stack start will be assigned later.
                                        (0267)     ;
                                        (0268) _stack_start:          equ 80h
008D: 50 80    MOV   A,0x80             (0269)     mov   A, _stack_start          ; Set top of stack to end of used RAM
008F: 4E       SWAP  SP,A               (0270)     swap  SP, A                    ; This is only temporary if going to LMM
0090: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0271) 
                                        (0272)     ;------------------------
                                        (0273)     ; Set Power-related Trim 
                                        (0274)     ;------------------------
                                        (0275) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0276) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0277)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0278)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0279)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0280) ELSE
                                        (0281) 	IF ( AGND_BYPASS )
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0284)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0285)     ; value using the proper trim values.
                                        (0286)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0287)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0288)   ENDIF
                                        (0289)  ENDIF
                                        (0290) ENDIF ; 5.0 V Operation
                                        (0291) 
                                        (0292) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0293)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0294)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0295)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0297)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0298)  ENDIF
                                        (0299) ENDIF ; 3.3 Volt Operation
                                        (0300) 
                                        (0301) 
0093: 55 F8 00 MOV   [_schedTimerAdc+194],0x0(0302)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0096: 55 F9 00 MOV   [_schedTimerAdc+195],0x0(0303)     mov  [bSSC_KEYSP], 0
0099: 71 10    OR    F,0x10             
                                        (0304) 
                                        (0305)     ;---------------------------------------
                                        (0306)     ; Initialize Crystal Oscillator and PLL
                                        (0307)     ;---------------------------------------
                                        (0308) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0309)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0310)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0311)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0312)     ; the ECO to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0318)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0319)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0320) .WaitFor1s:
                                        (0321)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0323)                                           ;  since interrupts are not globally enabled
                                        (0324) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0325)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0326)     M8C_SetBank1
009B: 62 E0 02 MOV   REG[0xE0],0x2      (0327)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
009E: 70 EF    AND   F,0xEF             
00A0: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0328)     M8C_SetBank0
                                        (0329)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0330) 
                                        (0331) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0332) 
                                        (0333) IF ( PLL_MODE )
                                        (0334)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0335)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0336)     ;
                                        (0337)     M8C_SetBank1
                                        (0338)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0339)     M8C_SetBank0
                                        (0340)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0341)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0342) 
                                        (0343) .WaitFor16ms:
                                        (0344)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0345)     jz   .WaitFor16ms
                                        (0346)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0347)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0348)     M8C_SetBank0
                                        (0349) 
                                        (0350) IF      ( WAIT_FOR_32K )
                                        (0351) ELSE ; !( WAIT_FOR_32K )
                                        (0352)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0353)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0354) ENDIF ;(WAIT_FOR_32K)
                                        (0355) ENDIF ;(PLL_MODE)
                                        (0356) 
                                        (0357) 	;-------------------------------------------------------
                                        (0358)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0359)     ;-------------------------------------------------------
                                        (0360) 
                                        (0361)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0362) 
                                        (0363) IF (SYSCLK_SOURCE)
                                        (0364)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0365) ENDIF
                                        (0366)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0367) 
                                        (0368) 	;------------------------
                                        (0369) 	; Close CT leakage path.
                                        (0370) 	;------------------------
00A3: 62 71 05 MOV   REG[0x71],0x5      (0371) 	mov reg[ACC00CR0], 05h
00A6: 62 75 05 MOV   REG[0x75],0x5      (0372) 	mov reg[ACC01CR0], 05h
00A9: 62 79 05 MOV   REG[0x79],0x5      (0373) 	mov reg[ACC02CR0], 05h
00AC: 62 7D 05 MOV   REG[0x7D],0x5      (0374) 	mov reg[ACC03CR0], 05h
00AF: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0375) 
                                        (0376) 
                                        (0377) 
                                        (0378) IF	(TOOLCHAIN & HITECH)
                                        (0379)     ;---------------------------------------------
                                        (0380)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0381)     ;---------------------------------------------
                                        (0382) 	global		__Lstackps
                                        (0383) 	mov     a,low __Lstackps
                                        (0384) 	swap    a,sp
                                        (0385) 
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0388)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0389)     RAM_SETPAGE_CUR 0
                                        (0390)     RAM_SETPAGE_MVW 0
                                        (0391)     RAM_SETPAGE_MVR 0
                                        (0392)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0393)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0394)     ELSE
                                        (0395)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0396)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0397) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0398) ELSE
                                        (0399)     ;---------------------------------------------
                                        (0400)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0401)     ;---------------------------------------------
                                        (0402) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0403)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 20    MOV   A,0x20             (0404)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0405)     swap  A, SP
00B5: 62 D3 03 MOV   REG[0xD3],0x3      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0406)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0407)     RAM_SETPAGE_CUR 0
                                        (0408)     RAM_SETPAGE_MVW 0
                                        (0409)     RAM_SETPAGE_MVR 0
                                        (0410) 
                                        (0411)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0412)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0413)   ELSE
                                        (0414)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0415)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0416) ELSE
                                        (0417)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0418)     swap  SP, A
                                        (0419) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0420) ENDIF ;	TOOLCHAIN
                                        (0421) 
                                        (0422)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0423)     ;---------------------------------------------------
                                        (0424)     ; Insert your custom code below this banner
                                        (0425)     ;---------------------------------------------------
                                        (0426) 
                                        (0427)     ;---------------------------------------------------
                                        (0428)     ; Insert your custom code above this banner
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0431) 
                                        (0432)     ;-------------------------
                                        (0433)     ; Load Base Configuration
                                        (0434)     ;-------------------------
                                        (0435)     ; Load global parameter settings and load the user modules in the
                                        (0436)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0437)     ; to minimize start up time; (2) We may still need to play with the
                                        (0438)     ; Sleep Timer.
                                        (0439)     ;
00C3: 7C 03 A5 LCALL 0x03A5             (0440)     lcall LoadConfigInit
00C6: 70 EF    AND   F,0xEF             
                                        (0441)     M8C_SetBank0
                                        (0442) 
                                        (0443)     ;-----------------------------------
                                        (0444)     ; Initialize C Run-Time Environment
                                        (0445)     ;-----------------------------------
                                        (0446) IF ( C_LANGUAGE_SUPPORT )
                                        (0447) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0448)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0449)     mov  [__r0],<__bss_start
                                        (0450) BssLoop:
                                        (0451)     cmp  [__r0],<__bss_end
                                        (0452)     jz   BssDone
                                        (0453)     mvi  [__r0],A
                                        (0454)     jmp  BssLoop
                                        (0455) BssDone:
                                        (0456)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0457)     mov  X,<__idata_start
                                        (0458)     mov  [__r0],<__data_start
                                        (0459) IDataLoop:
                                        (0460)     cmp  [__r0],<__data_end
                                        (0461)     jz   C_RTE_Done
                                        (0462)     push A
                                        (0463)     romx
                                        (0464)     mvi  [__r0],A
                                        (0465)     pop  A
                                        (0466)     inc  X
                                        (0467)     adc  A,0
                                        (0468)     jmp  IDataLoop
                                        (0469) 
                                        (0470) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0471) 
                                        (0472) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C8: 62 D0 00 MOV   REG[0xD0],0x0      (0473)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0474)                                        ; to use the Virtual Register page.
                                        (0475) 
                                        (0476)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0477)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0478)     ; text segment and may have been relocated by the Code Compressor.
                                        (0479)     ;
00CB: 50 02    MOV   A,0x2              (0480)     mov   A, >__pXIData                ; Get the address of the flash
00CD: 57 DE    MOV   X,0xDE             (0481)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CF: 08       PUSH  A                  (0482)     push  A
00D0: 28       ROMX                     (0483)     romx                               ; get the MSB of xidata's address
00D1: 53 1D    MOV   [__r0],A           (0484)     mov   [__r0], A
00D3: 18       POP   A                  (0485)     pop   A
00D4: 75       INC   X                  (0486)     inc   X
00D5: 09 00    ADC   A,0x0              (0487)     adc   A, 0
00D7: 28       ROMX                     (0488)     romx                               ; get the LSB of xidata's address
00D8: 4B       SWAP  A,X                (0489)     swap  A, X
00D9: 51 1D    MOV   A,[__r0]           (0490)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0491)                                        ;   XIData structure list in flash
00DB: 80 04    JMP   0x00E0             (0492)     jmp   .AccessStruct
                                        (0493) 
                                        (0494)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0495)     ; values of C variables. Each structure contains 3 member elements.
                                        (0496)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0497)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0498)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0499)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0500)     ; value in the second member element, an unsigned byte:
                                        (0501)     ; (1) If the value of the second element is non-zero, it represents
                                        (0502)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0503)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0504)     ; the bytes are copied to the block of RAM.
                                        (0505)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0506)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0507)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0508) 
                                        (0509) .AccessNextStructLoop:
00DD: 75       INC   X                  (0510)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0511)     adc   A, 0
00E0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0512) .AccessStruct:                         ; Entry point for first block
                                        (0513)     ;
                                        (0514)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0515)     ;
                                        (0516)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E3: 08       PUSH  A                  (0517)     push  A
00E4: 28       ROMX                     (0518)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E5: 60 D5    MOV   REG[0xD5],A        (0519)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E7: 74       INC   A                  (0520)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E8: A0 4B    JZ    0x0134             (0521)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00EA: 18       POP   A                  (0522)     pop   A                            ; restore pXIData to [A,X]
00EB: 75       INC   X                  (0523)     inc   X                            ; pXIData++
00EC: 09 00    ADC   A,0x0              (0524)     adc   A, 0
00EE: 08       PUSH  A                  (0525)     push  A
00EF: 28       ROMX                     (0526)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00F0: 53 1D    MOV   [__r0],A           (0527)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F2: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00F3: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to size)
00F4: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F6: 08       PUSH  A                  (0531)     push  A
00F7: 28       ROMX                     (0532)     romx                               ; Get the size (CPU.A <- *pXIData)
00F8: A0 1C    JZ    0x0115             (0533)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00FA: 53 1C    MOV   [__r1],A           (0534)     mov   [__r1], A                    ;             else downcount in __r1
00FC: 18       POP   A                  (0535)     pop   A                            ; restore pXIData to [A,X]
                                        (0536) 
                                        (0537) .CopyNextByteLoop:
                                        (0538)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0539)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0540)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0541)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0542)     ;
00FD: 75       INC   X                  (0543)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0x0              (0544)     adc   A, 0
0100: 08       PUSH  A                  (0545)     push  A
0101: 28       ROMX                     (0546)     romx                               ; Get the data value (CPU.A <- *pXIData)
0102: 3F 1D    MVI   [__r0],A           (0547)     mvi   [__r0], A                    ; Transfer the data to RAM
0104: 47 1D FF TST   [__r0],0xFF        (0548)     tst   [__r0], 0xff                 ; Check for page crossing
0107: B0 06    JNZ   0x010E             (0549)     jnz   .CopyLoopTail                ;   No crossing, keep going
0109: 5D D5    MOV   A,REG[0xD5]        (0550)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010B: 74       INC   A                  (0551)     inc   A
010C: 60 D5    MOV   REG[0xD5],A        (0552)     mov   reg[ MVW_PP], A
                                        (0553) .CopyLoopTail:
010E: 18       POP   A                  (0554)     pop   A                            ; restore pXIData to [A,X]
010F: 7A 1C    DEC   [__r1]             (0555)     dec   [__r1]                       ; End of this array in flash?
0111: BF EB    JNZ   0x00FD             (0556)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0113: 8F C9    JMP   0x00DD             (0557)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0558) 
                                        (0559) .ClearRAMBlockToZero:
0115: 18       POP   A                  (0560)     pop   A                            ; restore pXIData to [A,X]
0116: 75       INC   X                  (0561)     inc   X                            ; pXIData++ (point to next data byte)
0117: 09 00    ADC   A,0x0              (0562)     adc   A, 0
0119: 08       PUSH  A                  (0563)     push  A
011A: 28       ROMX                     (0564)     romx                               ; Get the run length (CPU.A <- *pXIData)
011B: 53 1C    MOV   [__r1],A           (0565)     mov   [__r1], A                    ; Initialize downcounter
011D: 50 00    MOV   A,0x0              (0566)     mov   A, 0                         ; Initialize source data
                                        (0567) 
                                        (0568) .ClearRAMBlockLoop:
                                        (0569)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0570)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0571)     ;
011F: 3F 1D    MVI   [__r0],A           (0572)     mvi   [__r0], A                    ; Clear a byte
0121: 47 1D FF TST   [__r0],0xFF        (0573)     tst   [__r0], 0xff                 ; Check for page crossing
0124: B0 08    JNZ   0x012D             (0574)     jnz   .ClearLoopTail               ;   No crossing, keep going
0126: 5D D5    MOV   A,REG[0xD5]        (0575)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0128: 74       INC   A                  (0576)     inc   A
0129: 60 D5    MOV   REG[0xD5],A        (0577)     mov   reg[ MVW_PP], A
012B: 50 00    MOV   A,0x0              (0578)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0579) .ClearLoopTail:
012D: 7A 1C    DEC   [__r1]             (0580)     dec   [__r1]                       ; Was this the last byte?
012F: BF EF    JNZ   0x011F             (0581)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0131: 18       POP   A                  (0582)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0132: 8F AA    JMP   0x00DD             (0583)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0584) 
                                        (0585) .C_RTE_WrapUp:
0134: 18       POP   A                  (0586)     pop   A                            ; balance stack
0135: 71 10    OR    F,0x10             
0137: 70 EF    AND   F,0xEF             
                                        (0587) 
                                        (0588) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0589) 
                                        (0590) C_RTE_Done:
                                        (0591) 
                                        (0592) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0593) 
                                        (0594)     ;-------------------------------
                                        (0595)     ; Voltage Stabilization for SMP
                                        (0596)     ;-------------------------------
                                        (0597) 
                                        (0598) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0599) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0600)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0601)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0602)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0603)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0604)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0605)     M8C_SetBank1
                                        (0606)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0607)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0608)     M8C_SetBank0
                                        (0609)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0610)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0611) .WaitFor2ms:
                                        (0612)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0613)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0614) ENDIF ; SMP is operational
                                        (0615) ENDIF ; 5.0V Operation
                                        (0616) 
                                        (0617)     ;-------------------------------
                                        (0618)     ; Set Power-On Reset (POR) Level
                                        (0619)     ;-------------------------------
                                        (0620) 
                                        (0621)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0622)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0623)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0624)     ; Invalid cases checked: 
                                        (0625)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0626) 
                                        (0627) 
                                        (0628) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0629)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0630)  ELSE
                                        (0631)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0632)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0633) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0634)    ENDIF
                                        (0635)  ENDIF
                                        (0636) ENDIF
                                        (0637)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0638)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0639)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0640)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0641)     ;  Technical Reference Manual #001-52594 for more information.
                                        (0642) 
                                        (0643)     M8C_SetBank1
                                        (0644) 
                                        (0645) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0646)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0647)  ELSE                                       ;    No, fast mode
                                        (0648)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0649)                                             ;       no, set midpoint POR in user code, if desired
                                        (0650)   ELSE ; 24HMz                              ;
                                        (0651)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0652)   ENDIF ; 24MHz
                                        (0653)  ENDIF ; Slow Mode
                                        (0654) ENDIF ; 5.0V Operation
                                        (0655) 
                                        (0656)     M8C_SetBank0
                                        (0657) 
                                        (0658)     ;----------------------------
                                        (0659)     ; Wrap up and invoke "main"
                                        (0660)     ;----------------------------
                                        (0661) 
                                        (0662)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0663)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0664)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0665)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0666) 
                                        (0667)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0668)     ;
                                        (0669)     M8C_SetBank1
013E: 62 E0 02 MOV   REG[0xE0],0x2      (0670)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E2 00 OR    REG[0xE2],0x0      (0671) 	or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0144: 70 EF    AND   F,0xEF             
                                        (0672)     M8C_SetBank0
                                        (0673) 
                                        (0674)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0675)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0676)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0677)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0678)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0679)                                    ; have been set during the boot process.
                                        (0680) IF	(TOOLCHAIN & HITECH)
                                        (0681) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0682) ELSE
                                        (0683) IF ENABLE_LJMP_TO_MAIN
                                        (0684)     ljmp  _main                    ; goto main (no return)
                                        (0685) ELSE
0149: 7C 09 4D LCALL _main              (0686)     lcall _main                    ; call main
                                        (0687) .Exit:
014C: 8F FF    JMP   0x014C             (0688)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0689) ENDIF
                                        (0690) ENDIF ; TOOLCHAIN
                                        (0691) 
                                        (0692)     ;---------------------------------
                                        (0693)     ; Library Access to Global Parms
                                        (0694)     ;---------------------------------
                                        (0695)     ;
                                        (0696)  bGetPowerSetting:
                                        (0697) _bGetPowerSetting:
                                        (0698)     ; Returns value of POWER_SETTING in the A register.
                                        (0699)     ; No inputs. No Side Effects.
                                        (0700)     ;
                                        (0701) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0702)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0703) ELSE
014E: 50 10    MOV   A,0x10             (0704)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0705) ENDIF
0150: 7F       RET                      (0706)     ret
                                        (0707) 
                                        (0708) IF	(TOOLCHAIN & HITECH)
                                        (0709) ELSE
                                        (0710)     ;---------------------------------
                                        (0711)     ; Order Critical RAM & ROM AREAs
                                        (0712)     ;---------------------------------
                                        (0713)     ;  'TOP' is all that has been defined so far...
                                        (0714) 
                                        (0715)     ;  ROM AREAs for C CONST, static & global items
                                        (0716)     ;
                                        (0717)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0718)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0719) __idata_start:
                                        (0720) 
                                        (0721)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0722) __func_lit_start:
                                        (0723) 
                                        (0724) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0725)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0726)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0727)     ; relocated by the code compressor, but the text area may shrink and
                                        (0728)     ; that moves xidata around.
                                        (0729)     ;
                                        (0730) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0731) ENDIF
                                        (0732) 
                                        (0733)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0734)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0735) 
                                        (0736)     ; CODE segment for general use
                                        (0737)     ;
                                        (0738)     AREA text (ROM, REL, CON)
                                        (0739) __text_start:
                                        (0740) 
                                        (0741)     ; RAM area usage
                                        (0742)     ;
                                        (0743)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0744) __data_start:
                                        (0745) 
                                        (0746)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0747)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0748)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0749) __bss_start:
                                        (0750) ENDIF ; TOOLCHAIN
                                        (0751) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
02E0: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_cy8c28433_micromouse_Bank1
                                        (0006) export LoadConfigTBL_cy8c28433_micromouse_Bank0
                                        (0007) export LoadConfigTBL_cy8c28433_micromouse_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_cy8c28433_micromouse_Bank0:
                                        (0010) ;  Instance name Counter16_Tick, User Module Counter16
                                        (0011) ;       Instance name Counter16_Tick, Block Name CNTR16_LSB(DBC00)
                                        (0012) 	db		23h, 00h		;Counter16_Tick_CONTROL_LSB_REG(DBC00CR0)
                                        (0013) 	db		21h, 8fh		;Counter16_Tick_PERIOD_LSB_REG(DBC00DR1)
                                        (0014) 	db		22h, 00h		;Counter16_Tick_COMPARE_LSB_REG(DBC00DR2)
                                        (0015) ;       Instance name Counter16_Tick, Block Name CNTR16_MSB(DBC01)
                                        (0016) 	db		27h, 00h		;Counter16_Tick_CONTROL_MSB_REG(DBC01CR0)
                                        (0017) 	db		25h, 01h		;Counter16_Tick_PERIOD_MSB_REG(DBC01DR1)
                                        (0018) 	db		26h, 00h		;Counter16_Tick_COMPARE_MSB_REG(DBC01DR2)
                                        (0019) ;  Instance name EzI2Cs, User Module EzI2Cs
                                        (0020) ;  Instance name PWM8_LeftFwd, User Module PWM8
                                        (0021) ;       Instance name PWM8_LeftFwd, Block Name PWM8(DCC23)
                                        (0022) 	db		4fh, 00h		;PWM8_LeftFwd_CONTROL_REG(DCC23CR0)
                                        (0023) 	db		4dh, ffh		;PWM8_LeftFwd_PERIOD_REG(DCC23DR1)
                                        (0024) 	db		4eh, 00h		;PWM8_LeftFwd_COMPARE_REG(DCC23DR2)
                                        (0025) ;  Instance name PWM8_LeftRev, User Module PWM8
                                        (0026) ;       Instance name PWM8_LeftRev, Block Name PWM8(DBC21)
                                        (0027) 	db		47h, 00h		;PWM8_LeftRev_CONTROL_REG(DBC21CR0)
                                        (0028) 	db		45h, ffh		;PWM8_LeftRev_PERIOD_REG(DBC21DR1)
                                        (0029) 	db		46h, 00h		;PWM8_LeftRev_COMPARE_REG(DBC21DR2)
                                        (0030) ;  Instance name PWM8_Pump, User Module PWM8
                                        (0031) ;       Instance name PWM8_Pump, Block Name PWM8(DCC02)
                                        (0032) 	db		2bh, 00h		;PWM8_Pump_CONTROL_REG(DCC02CR0)
                                        (0033) 	db		29h, 00h		;PWM8_Pump_PERIOD_REG(DCC02DR1)
                                        (0034) 	db		2ah, 00h		;PWM8_Pump_COMPARE_REG(DCC02DR2)
                                        (0035) ;  Instance name PWM8_RightFwd, User Module PWM8
                                        (0036) ;       Instance name PWM8_RightFwd, Block Name PWM8(DCC22)
                                        (0037) 	db		4bh, 00h		;PWM8_RightFwd_CONTROL_REG(DCC22CR0)
                                        (0038) 	db		49h, ffh		;PWM8_RightFwd_PERIOD_REG(DCC22DR1)
                                        (0039) 	db		4ah, 00h		;PWM8_RightFwd_COMPARE_REG(DCC22DR2)
                                        (0040) ;  Instance name PWM8_RightRev, User Module PWM8
                                        (0041) ;       Instance name PWM8_RightRev, Block Name PWM8(DBC20)
                                        (0042) 	db		43h, 00h		;PWM8_RightRev_CONTROL_REG(DBC20CR0)
                                        (0043) 	db		41h, ffh		;PWM8_RightRev_PERIOD_REG(DBC20DR1)
                                        (0044) 	db		42h, 00h		;PWM8_RightRev_COMPARE_REG(DBC20DR2)
                                        (0045) ;  Instance name SAR10, User Module SAR10
                                        (0046) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0047) ;  Global Register values Bank 0
                                        (0048) 	db		6ah, 00h		; ADCDataHigh register (SADC_DH)
                                        (0049) 	db		6bh, 00h		; ADCDataLow register (SADC_DL)
                                        (0050) 	db		62h, 00h		; AnalogClockSelect3 register (CLK_CR3)
                                        (0051) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0052) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0053) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0054) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0055) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0056) 	db		63h, 3fh		; AnalogReferenceControl register (ARF_CR)
                                        (0057) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0058) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0059) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0060) 	db		a0h, 00h		; DecimatorDataHigh:0 register (DEC0_DH)
                                        (0061) 	db		a2h, 00h		; DecimatorDataHigh:1 register (DEC1_DH)
                                        (0062) 	db		a4h, 00h		; DecimatorDataHigh:2 register (DEC2_DH)
                                        (0063) 	db		a6h, 00h		; DecimatorDataHigh:3 register (DEC3_DH)
                                        (0064) 	db		a1h, 00h		; DecimatorDataLow:0 register (DEC0_DL)
                                        (0065) 	db		a3h, 00h		; DecimatorDataLow:1 register (DEC1_DL)
                                        (0066) 	db		a5h, 00h		; DecimatorDataLow:2 register (DEC2_DL)
                                        (0067) 	db		a7h, 00h		; DecimatorDataLow:3 register (DEC3_DL)
                                        (0068) 	db		d6h, 44h		; I2CConfig:0 register (I2C0_CFG)
                                        (0069) 	db		e8h, 00h		; Multiply0InputX register (MUL0_X)
                                        (0070) 	db		e9h, 00h		; Multiply0InputY register (MUL0_Y)
                                        (0071) 	db		a8h, 00h		; Multiply1InputX register (MUL1_X)
                                        (0072) 	db		a9h, 00h		; Multiply1InputY register (MUL1_Y)
                                        (0073) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0074) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0075) 	db		c7h, 00h		; RowDigitalInterconnectInputSelect:2 register (RDI2DSM)
                                        (0076) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0077) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0078) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0079) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0080) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0081) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0RO0)
                                        (0082) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0RO1)
                                        (0083) 	db		b8h, ffh		; Row_1_InputMux register (RDI1RI)
                                        (0084) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0085) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0086) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0087) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0088) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1RO0)
                                        (0089) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1RO1)
                                        (0090) 	db		c0h, aah		; Row_2_InputMux register (RDI2RI)
                                        (0091) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0092) 	db		c2h, 00h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0093) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0094) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI2LT1)
                                        (0095) 	db		c5h, 22h		; Row_2_OutputDrive_0 register (RDI2RO0)
                                        (0096) 	db		c6h, 22h		; Row_2_OutputDrive_1 register (RDI2RO1)
                                        (0097) 	db		ffh
                                        (0098) LoadConfigTBL_cy8c28433_micromouse_Bank1:
                                        (0099) ;  Instance name Counter16_Tick, User Module Counter16
                                        (0100) ;       Instance name Counter16_Tick, Block Name CNTR16_LSB(DBC00)
                                        (0101) 	db		23h, 00h		;Counter16_Tick_(DBC00CR1)
                                        (0102) 	db		20h, 11h		;Counter16_Tick_FUNC_LSB_REG(DBC00FN)
                                        (0103) 	db		21h, 16h		;Counter16_Tick_INPUT_LSB_REG(DBC00IN)
                                        (0104) 	db		22h, 40h		;Counter16_Tick_OUTPUT_LSB_REG(DBC00OU)
                                        (0105) ;       Instance name Counter16_Tick, Block Name CNTR16_MSB(DBC01)
                                        (0106) 	db		27h, 00h		;Counter16_Tick_(DBC01CR1)
                                        (0107) 	db		24h, 31h		;Counter16_Tick_FUNC_MSB_REG(DBC01FN)
                                        (0108) 	db		25h, 36h		;Counter16_Tick_INPUT_MSB_REG(DBC01IN)
                                        (0109) 	db		26h, 40h		;Counter16_Tick_OUTPUT_MSB_REG(DBC01OU)
                                        (0110) ;  Instance name EzI2Cs, User Module EzI2Cs
                                        (0111) ;  Instance name PWM8_LeftFwd, User Module PWM8
                                        (0112) ;       Instance name PWM8_LeftFwd, Block Name PWM8(DCC23)
                                        (0113) 	db		4fh, 00h		;PWM8_LeftFwd_(DCC23CR1)
                                        (0114) 	db		4ch, 31h		;PWM8_LeftFwd_FUNC_REG(DCC23FN)
                                        (0115) 	db		4dh, 15h		;PWM8_LeftFwd_INPUT_REG(DCC23IN)
                                        (0116) 	db		4eh, 47h		;PWM8_LeftFwd_OUTPUT_REG(DCC23OU)
                                        (0117) ;  Instance name PWM8_LeftRev, User Module PWM8
                                        (0118) ;       Instance name PWM8_LeftRev, Block Name PWM8(DBC21)
                                        (0119) 	db		47h, 00h		;PWM8_LeftRev_(DBC21CR1)
                                        (0120) 	db		44h, 31h		;PWM8_LeftRev_FUNC_REG(DBC21FN)
                                        (0121) 	db		45h, 15h		;PWM8_LeftRev_INPUT_REG(DBC21IN)
                                        (0122) 	db		46h, 45h		;PWM8_LeftRev_OUTPUT_REG(DBC21OU)
                                        (0123) ;  Instance name PWM8_Pump, User Module PWM8
                                        (0124) ;       Instance name PWM8_Pump, Block Name PWM8(DCC02)
                                        (0125) 	db		2bh, 00h		;PWM8_Pump_(DCC02CR1)
                                        (0126) 	db		28h, 31h		;PWM8_Pump_FUNC_REG(DCC02FN)
                                        (0127) 	db		29h, 00h		;PWM8_Pump_INPUT_REG(DCC02IN)
                                        (0128) 	db		2ah, 47h		;PWM8_Pump_OUTPUT_REG(DCC02OU)
                                        (0129) ;  Instance name PWM8_RightFwd, User Module PWM8
                                        (0130) ;       Instance name PWM8_RightFwd, Block Name PWM8(DCC22)
                                        (0131) 	db		4bh, 00h		;PWM8_RightFwd_(DCC22CR1)
                                        (0132) 	db		48h, 31h		;PWM8_RightFwd_FUNC_REG(DCC22FN)
                                        (0133) 	db		49h, 15h		;PWM8_RightFwd_INPUT_REG(DCC22IN)
                                        (0134) 	db		4ah, 46h		;PWM8_RightFwd_OUTPUT_REG(DCC22OU)
                                        (0135) ;  Instance name PWM8_RightRev, User Module PWM8
                                        (0136) ;       Instance name PWM8_RightRev, Block Name PWM8(DBC20)
                                        (0137) 	db		43h, 00h		;PWM8_RightRev_(DBC20CR1)
                                        (0138) 	db		40h, 31h		;PWM8_RightRev_FUNC_REG(DBC20FN)
                                        (0139) 	db		41h, 15h		;PWM8_RightRev_INPUT_REG(DBC20IN)
                                        (0140) 	db		42h, 44h		;PWM8_RightRev_OUTPUT_REG(DBC20OU)
                                        (0141) ;  Instance name SAR10, User Module SAR10
                                        (0142) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0143) ;  Global Register values Bank 1
                                        (0144) 	db		a8h, 00h		; ADCControl0 register (SADC_CR0)
                                        (0145) 	db		a9h, 08h		; ADCControl1 register (SADC_CR1)
                                        (0146) 	db		aah, 00h		; ADCControl2 register (ADC_CR2)
                                        (0147) 	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
                                        (0148) 	db		ach, 00h		; ADCControl4 register (ADC_CR4)
                                        (0149) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0150) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0151) 	db		8bh, 00h		; AnalogColumnClockDivide register (ACE_CLK_CR3)
                                        (0152) 	db		60h, 02h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0153) 	db		8ah, 00h		; AnalogEClockSelect1 register (ACE_CLK_CR1)
                                        (0154) 	db		89h, 00h		; AnalogEColumnClockSelect register (ACE_CLK_CR0)
                                        (0155) 	db		75h, 09h		; AnalogEColumnInputSelect register (ACE_AMX_IN)
                                        (0156) 	db		76h, 00h		; AnalogEComparatorControl0 register (ACE_CMP_CR0)
                                        (0157) 	db		77h, 00h		; AnalogEComparatorControl1 register (ACE_CMP_CR1)
                                        (0158) 	db		7ah, 33h		; AnalogELUTControl0 register (ACE_ALT_CR0)
                                        (0159) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0160) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0161) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0162) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0163) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0164) 	db		6ah, 00h		; AnalogMuxBusConfig1 register (AMUX_CFG1)
                                        (0165) 	db		afh, 00h		; AnalogMuxClock register (AMUX_CLK)
                                        (0166) 	db		7bh, 00h		; AnalogOutBufferControl register (ACE_ABF_CR0)
                                        (0167) 	db		79h, 00h		; ComparatorGlobalInEn register (ACE_CMP_GI_EN)
                                        (0168) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0169) 	db		fdh, 00h		; DAC_Control_0 register (IDAC_CR0)
                                        (0170) 	db		dch, 00h		; DAC_Control_1 register (IDAC_CR1)
                                        (0171) 	db		91h, 00h		; DEC_CR0:0 register (DEC0_CR0)
                                        (0172) 	db		95h, 00h		; DEC_CR0:1 register (DEC1_CR0)
                                        (0173) 	db		99h, 00h		; DEC_CR0:2 register (DEC2_CR0)
                                        (0174) 	db		9dh, 00h		; DEC_CR0:3 register (DEC3_CR0)
                                        (0175) 	db		9ah, 00h		; DecimatorControl_5 register (DEC_CR5)
                                        (0176) 	db		92h, 00h		; DecimatorEnable:0 register (DEC_CR3)
                                        (0177) 	db		96h, 00h		; DecimatorEnable:1 register (DEC_CR4)
                                        (0178) 	db		d4h, 00h		; Decimator_Control:0 register (DEC0_CR)
                                        (0179) 	db		d5h, 00h		; Decimator_Control:1 register (DEC1_CR)
                                        (0180) 	db		d6h, 00h		; Decimator_Control:2 register (DEC2_CR)
                                        (0181) 	db		d7h, 00h		; Decimator_Control:3 register (DEC3_CR)
                                        (0182) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0183) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0184) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0185) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0186) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0187) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0188) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0189) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0190) 	db		adh, 80h		; I2CAddress:0 register (I2C0_ADDR)
                                        (0191) 	db		e7h, 00h		; IDACMode register (IDACMODE)
                                        (0192) 	db		e1h, 3eh		; OscillatorControl_1 register (OSC_CR1)
                                        (0193) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0194) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0195) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0196) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0197) 	db		85h, 00h		; PWM_Control register (ACE_PWM_CR)
                                        (0198) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0199) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0200) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0201) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0202) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0203) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0204) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0205) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0206) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0207) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0208) 	db		82h, 00h		; TSCMPHigh register (SADC_TSCMPH)
                                        (0209) 	db		81h, 00h		; TSCMPLow register (SADC_TSCMPL)
                                        (0210) 	db		71h, 00h		; TSource0 register (SADC_TSCR0)
                                        (0211) 	db		72h, 00h		; TSource1 register (SADC_TSCR1)
                                        (0212) 	db		ffh
                                        (0213) AREA psoc_config(rom, rel)
                                        (0214) LoadConfigTBL_cy8c28433_micromouse_Ordered:
                                        (0215) ;  Ordered Global Register values
                                        (0216) 	M8C_SetBank0
02E2: 62 00 00 MOV   REG[0x0],0x0       (0217) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02E5: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
02E7: 62 00 20 MOV   REG[0x0],0x20      (0219) 	mov	reg[00h], 20h		; Port_0_DriveMode_0 register (PRT0DM0)
02EA: 62 01 DF MOV   REG[0x1],0xDF      (0220) 	mov	reg[01h], dfh		; Port_0_DriveMode_1 register (PRT0DM1)
02ED: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
02EF: 62 03 FF MOV   REG[0x3],0xFF      (0222) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
02F2: 62 02 00 MOV   REG[0x2],0x0       (0223) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02F5: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
02F7: 62 02 00 MOV   REG[0x2],0x0       (0225) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02FA: 62 03 00 MOV   REG[0x3],0x0       (0226) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02FD: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
02FF: 62 01 00 MOV   REG[0x1],0x0       (0228) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0302: 62 04 07 MOV   REG[0x4],0x7       (0229) 	mov	reg[04h], 07h		; Port_1_Data register (PRT1DR)
0305: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0307: 62 04 0F MOV   REG[0x4],0xF       (0231) 	mov	reg[04h], 0fh		; Port_1_DriveMode_0 register (PRT1DM0)
030A: 62 05 F3 MOV   REG[0x5],0xF3      (0232) 	mov	reg[05h], f3h		; Port_1_DriveMode_1 register (PRT1DM1)
030D: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
030F: 62 07 0F MOV   REG[0x7],0xF       (0234) 	mov	reg[07h], 0fh		; Port_1_DriveMode_2 register (PRT1DM2)
0312: 62 06 00 MOV   REG[0x6],0x0       (0235) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0315: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
0317: 62 06 F0 MOV   REG[0x6],0xF0      (0237) 	mov	reg[06h], f0h		; Port_1_IntCtrl_0 register (PRT1IC0)
031A: 62 07 F0 MOV   REG[0x7],0xF0      (0238) 	mov	reg[07h], f0h		; Port_1_IntCtrl_1 register (PRT1IC1)
031D: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
031F: 62 05 F0 MOV   REG[0x5],0xF0      (0240) 	mov	reg[05h], f0h		; Port_1_IntEn register (PRT1IE)
0322: 62 08 00 MOV   REG[0x8],0x0       (0241) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0325: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
0327: 62 08 FF MOV   REG[0x8],0xFF      (0243) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
032A: 62 09 00 MOV   REG[0x9],0x0       (0244) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
032D: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
032F: 62 0B F7 MOV   REG[0xB],0xF7      (0246) 	mov	reg[0bh], f7h		; Port_2_DriveMode_2 register (PRT2DM2)
0332: 62 0A F8 MOV   REG[0xA],0xF8      (0247) 	mov	reg[0ah], f8h		; Port_2_GlobalSelect register (PRT2GS)
0335: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
0337: 62 0A 00 MOV   REG[0xA],0x0       (0249) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
033A: 62 0B 00 MOV   REG[0xB],0x0       (0250) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
033D: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
033F: 62 09 00 MOV   REG[0x9],0x0       (0252) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0342: 62 0C 00 MOV   REG[0xC],0x0       (0253) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0345: 71 10    OR    F,0x10             
                                        (0254) 	M8C_SetBank1
0347: 62 0C 00 MOV   REG[0xC],0x0       (0255) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
034A: 62 0D 00 MOV   REG[0xD],0x0       (0256) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
034D: 70 EF    AND   F,0xEF             
                                        (0257) 	M8C_SetBank0
034F: 62 0F 00 MOV   REG[0xF],0x0       (0258) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0352: 62 0E 00 MOV   REG[0xE],0x0       (0259) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0355: 71 10    OR    F,0x10             
                                        (0260) 	M8C_SetBank1
0357: 62 0E 00 MOV   REG[0xE],0x0       (0261) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
035A: 62 0F 00 MOV   REG[0xF],0x0       (0262) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
035D: 70 EF    AND   F,0xEF             
                                        (0263) 	M8C_SetBank0
035F: 62 0D 00 MOV   REG[0xD],0x0       (0264) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0362: 62 10 00 MOV   REG[0x10],0x0      (0265) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0365: 71 10    OR    F,0x10             
                                        (0266) 	M8C_SetBank1
0367: 62 10 00 MOV   REG[0x10],0x0      (0267) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
036A: 62 11 00 MOV   REG[0x11],0x0      (0268) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
036D: 70 EF    AND   F,0xEF             
                                        (0269) 	M8C_SetBank0
036F: 62 13 00 MOV   REG[0x13],0x0      (0270) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0372: 62 12 00 MOV   REG[0x12],0x0      (0271) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0375: 71 10    OR    F,0x10             
                                        (0272) 	M8C_SetBank1
0377: 62 12 00 MOV   REG[0x12],0x0      (0273) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
037A: 62 13 00 MOV   REG[0x13],0x0      (0274) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
037D: 70 EF    AND   F,0xEF             
                                        (0275) 	M8C_SetBank0
037F: 62 11 00 MOV   REG[0x11],0x0      (0276) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0382: 62 14 00 MOV   REG[0x14],0x0      (0277) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0385: 71 10    OR    F,0x10             
                                        (0278) 	M8C_SetBank1
0387: 62 14 00 MOV   REG[0x14],0x0      (0279) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
038A: 62 15 00 MOV   REG[0x15],0x0      (0280) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
038D: 70 EF    AND   F,0xEF             
                                        (0281) 	M8C_SetBank0
038F: 62 17 00 MOV   REG[0x17],0x0      (0282) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0392: 62 16 00 MOV   REG[0x16],0x0      (0283) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0395: 71 10    OR    F,0x10             
                                        (0284) 	M8C_SetBank1
0397: 62 16 00 MOV   REG[0x16],0x0      (0285) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
039A: 62 17 00 MOV   REG[0x17],0x0      (0286) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
039D: 70 EF    AND   F,0xEF             
                                        (0287) 	M8C_SetBank0
039F: 62 15 00 MOV   REG[0x15],0x0      (0288) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03A2: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
03A4: 7F       RET                      (0290) 	ret
                                        (0291) 
                                        (0292) 
                                        (0293) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_cy8c28433_micromouse
                                        (0026) export _LoadConfig_cy8c28433_micromouse
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
03A5: 7C 03 AC LCALL 0x03AC             (0058) 	lcall	LoadConfig_cy8c28433_micromouse
03A8: 7C 02 E0 LCALL 0x02E0             (0059) 	lcall	LoadConfigTBL_cy8c28433_micromouse_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
03AB: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration cy8c28433_micromouse
                                        (0067) ;
                                        (0068) ;    Load configuration registers for cy8c28433_micromouse.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_cy8c28433_micromouse:
                                        (0085)  LoadConfig_cy8c28433_micromouse:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
03AC: 10       PUSH  X                  (0088) 	push	x
03AD: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
03AF: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
03B1: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
03B2: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_cy8c28433_micromouse_Bank0
03B4: 57 90    MOV   X,0x90             (0094)     mov     X, <LoadConfigTBL_cy8c28433_micromouse_Bank0
03B6: 7C 03 C7 LCALL 0x03C7             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
03B9: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
03BB: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
03BC: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_cy8c28433_micromouse_Bank1
03BE: 57 1D    MOV   X,0x1D             (0101)     mov     X, <LoadConfigTBL_cy8c28433_micromouse_Bank1
03C0: 7C 03 C7 LCALL 0x03C7             (0102)     lcall   LoadConfig              ; Load the bank 1 values
03C3: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
03C5: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
03C6: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
03C7: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
03C9: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
03CA: 08       PUSH  A                  (0132)     push    A
03CB: 4F       MOV   X,SP               (0133)     mov     X, SP
03CC: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
03CF: D0 04    JNC   0x03D4             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03D1: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
03D4: 18       POP   A                  (0138)     pop     A
03D5: 20       POP   X                  (0139)     pop     X
03D6: 70 EF    AND   F,0xEF             
03D8: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03DB: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03DC: 08       PUSH  A                  (0145)     push    A
03DD: 28       ROMX                     (0146)     romx                            ; Load register address from table
03DE: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03E0: A0 1F    JZ    0x0400             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03E2: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03E3: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03E6: A0 03    JZ    0x03EA             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03E8: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03EA: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03EC: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03ED: 20       POP   X                  (0156)     pop     X
03EE: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03EF: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03F1: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03F2: 08       PUSH  A                  (0160)     push    A
03F3: 28       ROMX                     (0161)     romx                            ; load config data from the table
03F4: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03F5: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03F7: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03F9: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03FA: 20       POP   X                  (0166)     pop     X
03FB: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03FC: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03FE: 8F D7    JMP   0x03D6             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0400: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0402: 70 3F    AND   F,0x3F             
0404: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0406: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
0407: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
040A: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
040D: A0 03    JZ    0x0411             (0095)    jz   .DoTimer
040F: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
0411: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
0414: A0 03    JZ    0x0418             (0100)    jz   .IncBigCounter
0416: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_TickCount+3]
                                        (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_TickCount+2]
                                        (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_TickCount+1]
                                        (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
0418: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
041A: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
041B: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
041E: 7F       RET                      (0135)    ret
041F: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                      (0164)    ret
0423: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
0426: 50 00    MOV   A,0x0              (0198)    mov  A,0
0428: 53 00    MOV   [0x0],A            (0199)    mov  [SleepTimer_fTick],A
042A: 53 01    MOV   [0x1],A            (0200)    mov  [SleepTimer_bTimerValue],A
042C: 53 02    MOV   [0x2],A            (0201)    mov  [SleepTimer_bCountDown],A
042E: 53 03    MOV   [0x3],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
0430: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
0431: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
0432: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
0434: 4F       MOV   X,SP               (0270)    mov  X, SP
0435: 08       PUSH  A                  (0271)    push A
0436: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
0438: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
043A: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
043C: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
043E: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
0440: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
0442: 18       POP   A                  (0278)    pop  A
0443: 70 3F    AND   F,0x3F             
0445: 71 C0    OR    F,0xC0             
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0447: 7F       RET                      (0280)    ret
0448: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
044B: 55 00 00 MOV   [0x0],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
044E: 47 00 FF TST   [0x0],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0451: AF FC    JZ    0x044E             (0319)    jz    .WaitTick
0453: 55 00 00 MOV   [0x0],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
0456: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0457: BF F6    JNZ   0x044E             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0459: 7F       RET                      (0325)    ret
045A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
045D: 4B       SWAP  A,X                (0366)    swap  A,X
045E: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
0460: B0 06    JNZ   0x0467             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0462: 47 02 FF TST   [0x2],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0465: BF FC    JNZ   0x0462             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
0467: 4B       SWAP  A,X                (0376)    swap  A,X
0468: 53 02    MOV   [0x2],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
046A: 7F       RET                      (0380)    ret
046B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
046E: 51 03    MOV   A,[0x3]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0470: 7F       RET                      (0418)    ret
0471: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0474: 53 01    MOV   [0x1],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0476: 7F       RET                      (0454)    ret
0477: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
047A: 51 01    MOV   A,[0x1]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
047C: 7F       RET                      (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\sar10int.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SAR10INT.asm
                                        (0004) ;;   Version: 1.0, Updated on 2012/3/2 at 9:11:29
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SAR10 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR10.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SAR10_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) AREA InterruptRAM (RAM,REL,CON)
                                        (0024)    
                                        (0025) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0026) ;---------------------------------------------------
                                        (0027) ; Insert your custom declarations below this banner
                                        (0028) ;---------------------------------------------------
                                        (0029) 
                                        (0030) ;------------------------
                                        (0031) ; Includes
                                        (0032) ;------------------------
                                        (0033) 
                                        (0034) 	
                                        (0035) ;------------------------
                                        (0036) ;  Constant Definitions
                                        (0037) ;------------------------
                                        (0038) 
                                        (0039) 
                                        (0040) ;------------------------
                                        (0041) ; Variable Allocation
                                        (0042) ;------------------------
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _SAR10_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _SAR10_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
047D: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file SAR10INT.asm
FILE: lib\sar10.asm                     (0001) ;;*****************************************************************************
047E: 43 DE 04 OR    REG[0xDE],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SAR10.asm
                                        (0004) ;;   Version: 1.0, Updated on 2012/3/2 at 9:11:29
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SAR10 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SAR10.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  SAR10_EnableInt
                                        (0030) export _SAR10_EnableInt
                                        (0031) export  SAR10_DisableInt
                                        (0032) export _SAR10_DisableInt
                                        (0033) export  SAR10_Start
                                        (0034) export _SAR10_Start
                                        (0035) export  SAR10_Stop
                                        (0036) export _SAR10_Stop
                                        (0037) export  SAR10_Trigger
                                        (0038) export _SAR10_Trigger
                                        (0039) export  SAR10_fIsDataAvailable
                                        (0040) export _SAR10_fIsDataAvailable
                                        (0041) export  SAR10_iGetData
                                        (0042) export _SAR10_iGetData
                                        (0043) export  SAR10_bGetData
                                        (0044) export _SAR10_bGetData
                                        (0045) export  SAR10_SetADCChannel
                                        (0046) export _SAR10_SetADCChannel
                                        (0047) export  SAR10_SetTriggerSrc
                                        (0048) export _SAR10_SetTriggerSrc
                                        (0049) export  SAR10_EnableAutoTrigger
                                        (0050) export _SAR10_EnableAutoTrigger
                                        (0051) export  SAR10_SetClk
                                        (0052) export _SAR10_SetClk
                                        (0053) export  SAR10_SetRunMode
                                        (0054) export _SAR10_SetRunMode
                                        (0055) 
                                        (0056) AREA cy8c28433_micromouse_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) ;-----------------------------------------------
                                        (0063) ; Variable Allocation
                                        (0064) ;-----------------------------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) 
                                        (0069) .SECTION
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;  FUNCTION NAME: SAR10_EnableInt
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
                                        (0075) ;     associated with this User Module. This function has no effect until and
                                        (0076) ;     unless the global interrupts are enabled (for example by using the
                                        (0077) ;     macro M8C_EnableGInt).
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;
                                        (0080) ;  ARGUMENTS:    None.
                                        (0081) ;  RETURNS:      Nothing.
                                        (0082) ;  SIDE EFFECTS: 
                                        (0083) ;    The A and X registers may be modified by this or future implementations
                                        (0084) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0085) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0086) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0087) ;    functions.
                                        (0088) ;
                                        (0089)  SAR10_EnableInt:
                                        (0090) _SAR10_EnableInt:
                                        (0091)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0092)    SAR10_EnableInt_M
                                        (0093)    RAM_EPILOGUE RAM_USE_CLASS_1
0481: 7F       RET                      (0094)    ret
0482: 41 DE FB AND   REG[0xDE],0xFB     
                                        (0095) 
                                        (0096) .ENDSECTION
                                        (0097) 
                                        (0098) 
                                        (0099) .SECTION
                                        (0100) ;-----------------------------------------------------------------------------
                                        (0101) ;  FUNCTION NAME: SAR10_DisableInt
                                        (0102) ;
                                        (0103) ;  DESCRIPTION:
                                        (0104) ;     Disables the interrupt mode operation by clearing the interrupt enable
                                        (0105) ;     mask bit associated with this User Module.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;
                                        (0108) ;  ARGUMENTS:    None
                                        (0109) ;  RETURNS:      Nothing
                                        (0110) ;  SIDE EFFECTS: 
                                        (0111) ;    The A and X registers may be modified by this or future implementations
                                        (0112) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0113) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0114) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0115) ;    functions.
                                        (0116) ;
                                        (0117)  SAR10_DisableInt:
                                        (0118) _SAR10_DisableInt:
                                        (0119)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120)    SAR10_DisableInt_M
                                        (0121)    RAM_EPILOGUE RAM_USE_CLASS_1
0485: 7F       RET                      (0122)    ret
0486: 71 10    OR    F,0x10             
0488: 43 A8 01 OR    REG[0xA8],0x1      
048B: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124) .ENDSECTION
                                        (0125) 
                                        (0126) 
                                        (0127) .SECTION
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  FUNCTION NAME: SAR10_Start
                                        (0130) ;
                                        (0131) ;  DESCRIPTION:
                                        (0132) ;     Enables SAR operation. 
                                        (0133) ;     Set the ADC_EN bit in SAR_CR0 register
                                        (0134) ;-----------------------------------------------------------------------------
                                        (0135) ;
                                        (0136) ;  ARGUMENTS:    None
                                        (0137) ;  RETURNS:      Nothing
                                        (0138) ;  SIDE EFFECTS: 
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  SAR10_Start:
                                        (0146) _SAR10_Start:
                                        (0147)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0148)    M8C_SetBank1
                                        (0149)    SAR10_Start_M
                                        (0150)    M8C_SetBank0
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
048D: 7F       RET                      (0152)    ret
048E: 71 10    OR    F,0x10             
0490: 41 A8 FE AND   REG[0xA8],0xFE     
0493: 70 EF    AND   F,0xEF             
                                        (0153) 
                                        (0154) .ENDSECTION
                                        (0155) 
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: SAR10_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables SAR operation 
                                        (0163) ;     Clear ADC_EN bit in SAR_CR0 register
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS: 
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  SAR10_Stop:
                                        (0176) _SAR10_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    M8C_SetBank1
                                        (0179)    SAR10_Stop_M
                                        (0180)    M8C_SetBank0
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0495: 7F       RET                      (0182)    ret
0496: 71 10    OR    F,0x10             
                                        (0183) 
                                        (0184) .ENDSECTION
                                        (0185) 
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: SAR10_Trigger
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Trigger the SAR to sample for one time
                                        (0192) ;     Set START/ONGOING bit in SAR_CR0 register
                                        (0193) ;
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;
                                        (0196) ;  ARGUMENTS:   Nothing
                                        (0197) ;  RETURNS:         Nothing
                                        (0198) ;  SIDE EFFECTS: 
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  SAR10_Trigger:
                                        (0206) _SAR10_Trigger:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    M8C_SetBank1
0498: 43 A8 02 OR    REG[0xA8],0x2      (0209)    or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
049B: 70 EF    AND   F,0xEF             
                                        (0210)    M8C_SetBank0
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
049D: 7F       RET                      (0212)    ret
049E: 71 10    OR    F,0x10             
                                        (0213) 
                                        (0214) .ENDSECTION
                                        (0215) 
                                        (0216) .SECTION
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  FUNCTION NAME: SAR10_fIsDataAvailable
                                        (0219) ;
                                        (0220) ;  DESCRIPTION:
                                        (0221) ;     Checks the availability of sampled data.
                                        (0222) ;     Get READY bit from SAR_CR0 register
                                        (0223) ;
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:   None
                                        (0227) ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
                                        (0228) ;  SIDE EFFECTS: 
                                        (0229) ;    The A and X registers may be modified by this or future implementations
                                        (0230) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0231) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0232) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0233) ;    functions.
                                        (0234) ;
                                        (0235)  SAR10_fIsDataAvailable:
                                        (0236) _SAR10_fIsDataAvailable:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0238)    M8C_SetBank1
04A0: 5D A8    MOV   A,REG[0xA8]        (0239)    mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
04A2: 70 EF    AND   F,0xEF             
                                        (0240)    M8C_SetBank0
04A4: 21 04    AND   A,0x4              (0241)    and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_4
04A6: 7F       RET                      (0243)    ret
                                        (0244) 
                                        (0245) .ENDSECTION
                                        (0246) 
                                        (0247) .SECTION
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;  FUNCTION NAME: SAR10_iGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:
                                        (0252) ;     Returns last converted data.
                                        (0253) ;     SAR_DL will be read first, then the SAR_DH
                                        (0254) ;     The MSB is returned in X and the LSB in A
                                        (0255) ;     Note: this function returns correct result only in right-justify mode 
                                        (0256) ;     for CY8C28x45 device.
                                        (0257) ;
                                        (0258) ;-----------------------------------------------------------------------------
                                        (0259) ;
                                        (0260) ;  ARGUMENTS:   None
                                        (0261) ;  RETURNS:     fastcall16 INT iGetData(void)
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269)    Temp_offs:         equ  -2
                                        (0270)    DL_REG_offs:       equ  -1
                                        (0271)         
                                        (0272)  SAR10_iGetData:
                                        (0273) _SAR10_iGetData:
                                        (0274)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0275) IF(SAR10_Justify)  ; for CY8C28x45 Device
04A7: 5D 6B    MOV   A,REG[0x6B]        (0276)    mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
04A9: 08       PUSH  A                  (0277)    push  A                                    ; Store 8 lowest bits in stack
04AA: 5D 6A    MOV   A,REG[0x6A]        (0278)    mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
04AC: 5C       MOV   X,A                (0279)    mov   X, A                                 ; Get MSB of result
04AD: 18       POP   A                  (0280)    pop   A                                    ; Get LSB of result
04AE: 70 3F    AND   F,0x3F             
04B0: 71 C0    OR    F,0xC0             
                                        (0281) ELSE ;for CY8C22x45 device
                                        (0282)    mov   A, 0x00                              ; Init local var
                                        (0283)    push  A                                    ; Reserve one byte in stack
                                        (0284)    mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
                                        (0285)    push  A                                    ; Store 2 lowest bits in stack
                                        (0286)    mov   X, SP                                ; Set SP in X
                                        (0287)    mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
                                        (0288)    asl   A                                    ; Determine two highest bits and store it in stack
                                        (0289)    rlc   [X+Temp_offs]
                                        (0290)    asl   A
                                        (0291)    rlc   [X+Temp_offs]
                                        (0292)    or    A, [X+DL_REG_offs]                    ; Form LSB of result
                                        (0293)    pop   X                                     
                                        (0294)    pop   X                                     ; Get MSB of result
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_2
04B2: 7F       RET                      (0297)    ret
                                        (0298) 
                                        (0299) .ENDSECTION
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: SAR10_GetDataMSB8
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;    Returns last converted data.
                                        (0307) ;    Note: this function returns correct result only in left-justify mode
                                        (0308) ;    for CY8C28x45 device.  
                                        (0309) ;
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS:    Nothing
                                        (0313) ;  RETURNS:          fastcall16 char GetDataMSB8(void)
                                        (0314) ;  SIDE EFFECTS: 
                                        (0315) ;    The A and X registers may be modified by this or future implementations
                                        (0316) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0317) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0318) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0319) ;    functions.
                                        (0320) ;
                                        (0321)  SAR10_bGetData:
                                        (0322) _SAR10_bGetData:
                                        (0323)    RAM_PROLOGUE RAM_USE_CLASS_1
04B3: 5D 6A    MOV   A,REG[0x6A]        (0324)    mov   A,reg[SAR10_SAR_DH_REG]
                                        (0325)    RAM_EPILOGUE RAM_USE_CLASS_1
04B5: 7F       RET                      (0326)    ret
                                        (0327) 
                                        (0328) .ENDSECTION
                                        (0329) 
                                        (0330) .SECTION
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;  FUNCTION NAME: SAR10_SelectADCChannel
                                        (0333) ;
                                        (0334) ;  DESCRIPTION:
                                        (0335) ;    Select the SAR input from 14 optional input channels.
                                        (0336) ;   Set ADC_CHS bits in SAR_CR0 register
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;
                                        (0339) ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
                                        (0340) ;  RETURNS:    None
                                        (0341) ;  SIDE EFFECTS: 
                                        (0342) ;    The A and X registers may be modified by this or future implementations
                                        (0343) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0344) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0345) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0346) ;    functions.
                                        (0347) ;
                                        (0348)  SAR10_SetADCChannel:
                                        (0349) _SAR10_SetADCChannel:
                                        (0350)    RAM_PROLOGUE RAM_USE_CLASS_2
04B6: 21 78    AND   A,0x78             (0351)    and   A, SAR10_CHN_SEL_MASK
04B8: 4F       MOV   X,SP               (0352)    mov   X, SP
04B9: 08       PUSH  A                  (0353)    push  A                                     ; store value in stack
04BA: 71 10    OR    F,0x10             
                                        (0354)    M8C_SetBank1
04BC: 5D A8    MOV   A,REG[0xA8]        (0355)    mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
04BE: 21 87    AND   A,0x87             (0356)    and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
04C0: 2B 00    OR    A,[X+0]            (0357)    or    A, [X]                                ; set ADC_CHS bits
04C2: 60 A8    MOV   REG[0xA8],A        (0358)    mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
04C4: 70 EF    AND   F,0xEF             
                                        (0359)    M8C_SetBank0
04C6: 18       POP   A                  (0360)    pop   A
04C7: 70 3F    AND   F,0x3F             
04C9: 71 C0    OR    F,0xC0             
                                        (0361)    RAM_EPILOGUE RAM_USE_CLASS_2
04CB: 7F       RET                      (0362)    ret
                                        (0363) 
                                        (0364) .ENDSECTION
                                        (0365) 
                                        (0366) .SECTION
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368) ;  FUNCTION NAME: SAR10_SelectTriggerSrc
                                        (0369) ;
                                        (0370) ;  DESCRIPTION:
                                        (0371) ;    Select the SAR10 auto-trigger source 
                                        (0372) ;    by setting TIGSEL in SAR_CR1
                                        (0373) ;
                                        (0374) ;-----------------------------------------------------------------------------
                                        (0375) ;
                                        (0376) ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
                                        (0377) ;  RETURNS:    None
                                        (0378) ;  SIDE EFFECTS: 
                                        (0379) ;    The A and X registers may be modified by this or future implementations
                                        (0380) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0381) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0382) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0383) ;    functions.
                                        (0384) ;
                                        (0385)  SAR10_SetTriggerSrc:
                                        (0386) _SAR10_SetTriggerSrc:
                                        (0387)    RAM_PROLOGUE RAM_USE_CLASS_2
04CC: 21 30    AND   A,0x30             (0388)    and   A, SAR10_TRG_SEL_MASK 
04CE: 4F       MOV   X,SP               (0389)    mov   X, SP
04CF: 08       PUSH  A                  (0390)    push  A                                    ; store value in stack
04D0: 71 10    OR    F,0x10             
                                        (0391)    M8C_SetBank1
04D2: 5D A9    MOV   A,REG[0xA9]        (0392)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
04D4: 21 CF    AND   A,0xCF             (0393)    and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
04D6: 2B 00    OR    A,[X+0]            (0394)    or    A, [X]                                ; set TIGSEL bits
04D8: 60 A9    MOV   REG[0xA9],A        (0395)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
04DA: 70 EF    AND   F,0xEF             
                                        (0396)    M8C_SetBank0
04DC: 18       POP   A                  (0397)    pop   A
04DD: 70 3F    AND   F,0x3F             
04DF: 71 C0    OR    F,0xC0             
                                        (0398)    RAM_EPILOGUE RAM_USE_CLASS_2
04E1: 7F       RET                      (0399)    ret
                                        (0400) 
                                        (0401) .ENDSECTION
                                        (0402) 
                                        (0403) .SECTION
                                        (0404) ;-----------------------------------------------------------------------------
                                        (0405) ;  FUNCTION NAME: SAR10_EnableAutoTrigger
                                        (0406) ;
                                        (0407) ;  DESCRIPTION:
                                        (0408) ;    Global enable CR of the SAR10 auto-trigger function by setting 
                                        (0409) ;    by setting ALIGN_EN in SAR_CR1
                                        (0410) ;
                                        (0411) ;-----------------------------------------------------------------------------
                                        (0412) ;
                                        (0413) ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
                                        (0414) ;  RETURNS:    None
                                        (0415) ;  SIDE EFFECTS: 
                                        (0416) ;    The A and X registers may be modified by this or future implementations
                                        (0417) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0419) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0420) ;    functions.
                                        (0421) ;
                                        (0422)  SAR10_EnableAutoTrigger:
                                        (0423) _SAR10_EnableAutoTrigger:
                                        (0424)    RAM_PROLOGUE RAM_USE_CLASS_2
04E2: 21 01    AND   A,0x1              (0425)    and   A, SAR10_ALIGN_EN_MASK
04E4: 4F       MOV   X,SP               (0426)    mov   X, SP
04E5: 08       PUSH  A                  (0427)    push  A                                    ; store value in stack
04E6: 71 10    OR    F,0x10             
                                        (0428)    M8C_SetBank1
04E8: 5D A9    MOV   A,REG[0xA9]        (0429)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
04EA: 21 FE    AND   A,0xFE             (0430)    and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
04EC: 2B 00    OR    A,[X+0]            (0431)    or    A, [X]                                ; set ALIGN_EN bits
04EE: 60 A9    MOV   REG[0xA9],A        (0432)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
04F0: 70 EF    AND   F,0xEF             
                                        (0433)    M8C_SetBank0
04F2: 18       POP   A                  (0434)    pop   A
04F3: 70 3F    AND   F,0x3F             
04F5: 71 C0    OR    F,0xC0             
                                        (0435)    RAM_EPILOGUE RAM_USE_CLASS_2
04F7: 7F       RET                      (0436)    ret
                                        (0437) 
                                        (0438) .ENDSECTION
                                        (0439) 
                                        (0440) .SECTION
                                        (0441) ;-----------------------------------------------------------------------------
                                        (0442) ;  FUNCTION NAME: SAR10_SetClk
                                        (0443) ;
                                        (0444) ;  DESCRIPTION:
                                        (0445) ;    Set SAR Sample Rate and Clock Selection 
                                        (0446) ;    by setting CLKSEL bits in SAR_CR1
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;
                                        (0450) ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
                                        (0451) ;  RETURNS:    None
                                        (0452) ;  SIDE EFFECTS: 
                                        (0453) ;    The A and X registers may be modified by this or future implementations
                                        (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0457) ;    functions.
                                        (0458) ;
                                        (0459)  SAR10_SetClk:
                                        (0460) _SAR10_SetClk:
                                        (0461)    RAM_PROLOGUE RAM_USE_CLASS_2
04F8: 21 0E    AND   A,0xE              (0462)    and   A, SAR10_CLK_SEL_MASK
04FA: 4F       MOV   X,SP               (0463)    mov   X, SP
04FB: 08       PUSH  A                  (0464)    push  A                                    ; store value in stack
04FC: 71 10    OR    F,0x10             
                                        (0465)    M8C_SetBank1
04FE: 5D A9    MOV   A,REG[0xA9]        (0466)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
0500: 21 F1    AND   A,0xF1             (0467)    and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
0502: 2B 00    OR    A,[X+0]            (0468)    or    A, [X]                                ; set CLKSEL bits
0504: 60 A9    MOV   REG[0xA9],A        (0469)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
0506: 70 EF    AND   F,0xEF             
                                        (0470)    M8C_SetBank0
0508: 18       POP   A                  (0471)    pop   A
0509: 70 3F    AND   F,0x3F             
050B: 71 C0    OR    F,0xC0             
                                        (0472)    RAM_EPILOGUE RAM_USE_CLASS_2
050D: 7F       RET                      (0473)    ret
                                        (0474) 
                                        (0475) .ENDSECTION
                                        (0476) 
                                        (0477) .SECTION
                                        (0478) ;-----------------------------------------------------------------------------
                                        (0479) ;  FUNCTION NAME: SAR10_SetRunMode
                                        (0480) ;
                                        (0481) ;  DESCRIPTION:
                                        (0482) ;    Set free-running mode for SAR
                                        (0483) ;    by setting FREERUN bits in SAR_CR2
                                        (0484) ;
                                        (0485) ;-----------------------------------------------------------------------------
                                        (0486) ;
                                        (0487) ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
                                        (0488) ;  RETURNS:    None
                                        (0489) ;  SIDE EFFECTS: 
                                        (0490) ;    The A and X registers may be modified by this or future implementations
                                        (0491) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0492) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0493) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0494) ;    functions.
                                        (0495) ;
                                        (0496)  SAR10_SetRunMode:
                                        (0497) _SAR10_SetRunMode:
                                        (0498)    RAM_PROLOGUE RAM_USE_CLASS_2
050E: 21 08    AND   A,0x8              (0499)    and   A, SAR10_FREE_RUN_MASK
0510: 4F       MOV   X,SP               (0500)    mov   X, SP
0511: 08       PUSH  A                  (0501)    push  A                                    ; store value in stack
0512: 71 10    OR    F,0x10             
                                        (0502)    M8C_SetBank1
0514: 5D AA    MOV   A,REG[0xAA]        (0503)    mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
0516: 21 F7    AND   A,0xF7             (0504)    and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
0518: 2B 00    OR    A,[X+0]            (0505)    or    A, [X]                                ; set FREERUN bits
051A: 60 AA    MOV   REG[0xAA],A        (0506)    mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
051C: 70 EF    AND   F,0xEF             
                                        (0507)    M8C_SetBank0
051E: 18       POP   A                  (0508)    pop   A
051F: 70 3F    AND   F,0x3F             
0521: 71 C0    OR    F,0xC0             
                                        (0509)    RAM_EPILOGUE RAM_USE_CLASS_2
0523: 7F       RET                      (0510)    ret
                                        (0511) 
                                        (0512) .ENDSECTION
                                        (0513) ; End of File SAR10.asm
FILE: lib\pwm8_rightrevint.asm          (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_RightRevINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_RightRev.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_RightRev_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_RightRev_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_RightRev_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0524: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_RightRevINT.asm
FILE: lib\pwm8_rightrev.asm             (0001) ;;*****************************************************************************
0525: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_RightRev.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_RightRev.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_RightRev_EnableInt
                                        (0030) export _PWM8_RightRev_EnableInt
                                        (0031) export  PWM8_RightRev_DisableInt
                                        (0032) export _PWM8_RightRev_DisableInt
                                        (0033) export  PWM8_RightRev_Start
                                        (0034) export _PWM8_RightRev_Start
                                        (0035) export  PWM8_RightRev_Stop
                                        (0036) export _PWM8_RightRev_Stop
                                        (0037) export  PWM8_RightRev_WritePeriod
                                        (0038) export _PWM8_RightRev_WritePeriod
                                        (0039) export  PWM8_RightRev_WritePulseWidth
                                        (0040) export _PWM8_RightRev_WritePulseWidth
                                        (0041) export  PWM8_RightRev_bReadPulseWidth
                                        (0042) export _PWM8_RightRev_bReadPulseWidth
                                        (0043) export  PWM8_RightRev_bReadCounter
                                        (0044) export _PWM8_RightRev_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_RightRev_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_RightRev_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_RightRev_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_RightRev_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA cy8c28433_micromouse_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_RightRev_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_RightRev_EnableInt:
                                        (0091) _PWM8_RightRev_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_RightRev_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0528: 7F       RET                      (0095)    ret
0529: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_RightRev_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_RightRev_DisableInt:
                                        (0119) _PWM8_RightRev_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_RightRev_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
052C: 7F       RET                      (0123)    ret
052D: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_RightRev_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_RightRev_Start:
                                        (0148) _PWM8_RightRev_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_RightRev_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0530: 7F       RET                      (0152)    ret
0531: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_RightRev_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_RightRev_Stop:
                                        (0176) _PWM8_RightRev_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_RightRev_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0534: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_RightRev_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_RightRev_WritePeriod:
                                        (0206) _PWM8_RightRev_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0535: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM8_RightRev_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0537: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_RightRev_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_RightRev_WritePulseWidth:
                                        (0233) _PWM8_RightRev_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0538: 60 42    MOV   REG[0x42],A        (0235)    mov   reg[PWM8_RightRev_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
053A: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_RightRev_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_RightRev_bReadPulseWidth:
                                        (0260) _PWM8_RightRev_bReadPulseWidth:
                                        (0261)  bPWM8_RightRev_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bPWM8_RightRev_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
053B: 5D 42    MOV   A,REG[0x42]        (0264)    mov   A, reg[PWM8_RightRev_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
053D: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_RightRev_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_RightRev_bReadCounter:
                                        (0293) _PWM8_RightRev_bReadCounter:
                                        (0294)  bPWM8_RightRev_ReadCounter:                     ; this name deprecated
                                        (0295) _bPWM8_RightRev_ReadCounter:                     ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
053E: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
053F: 5D 42    MOV   A,REG[0x42]        (0304)    mov   A, reg[PWM8_RightRev_COMPARE_REG]       ; Save the Compare register on the stack
0541: 08       PUSH  A                  (0305)    push  A                                       ;
0542: 41 43 FE AND   REG[0x43],0xFE     
0545: 71 10    OR    F,0x10             
                                        (0306)    PWM8_RightRev_Stop_M                          ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0547: 5D 41    MOV   A,REG[0x41]        (0308)    mov   A, reg[PWM8_RightRev_INPUT_REG]         ; save the clock input setting
0549: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
054A: 62 41 00 MOV   REG[0x41],0x0      (0311)    mov   reg[PWM8_RightRev_INPUT_REG], INPUT_REG_NULL
054D: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
054F: 5D 40    MOV   A,REG[0x40]        (0314)    mov   A, reg[PWM8_RightRev_COUNTER_REG]       ; DR2 <- DR0
0551: 5D 42    MOV   A,REG[0x42]        (0315)    mov   A, reg[PWM8_RightRev_COMPARE_REG]       ; Stash the Count on the stack
0553: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0554: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0556: 60 42    MOV   REG[0x42],A        (0318)    mov   reg[PWM8_RightRev_COMPARE_REG], A
0558: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
055A: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
055C: 60 41    MOV   REG[0x41],A        (0321)    mov   reg[PWM8_RightRev_INPUT_REG], A         ;
055E: 70 EF    AND   F,0xEF             
0560: 43 43 01 OR    REG[0x43],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_RightRev_Start_M                         ;   then re-enable the PWM.
0563: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0564: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0566: 70 3F    AND   F,0x3F             
0568: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
056A: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_RightRev.asm
FILE: lib\pwm8_rightfwdint.asm          (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_RightFwdINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_RightFwd.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_RightFwd_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_RightFwd_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_RightFwd_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
056B: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_RightFwdINT.asm
FILE: lib\pwm8_rightfwd.asm             (0001) ;;*****************************************************************************
056C: 43 DF 04 OR    REG[0xDF],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_RightFwd.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_RightFwd.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_RightFwd_EnableInt
                                        (0030) export _PWM8_RightFwd_EnableInt
                                        (0031) export  PWM8_RightFwd_DisableInt
                                        (0032) export _PWM8_RightFwd_DisableInt
                                        (0033) export  PWM8_RightFwd_Start
                                        (0034) export _PWM8_RightFwd_Start
                                        (0035) export  PWM8_RightFwd_Stop
                                        (0036) export _PWM8_RightFwd_Stop
                                        (0037) export  PWM8_RightFwd_WritePeriod
                                        (0038) export _PWM8_RightFwd_WritePeriod
                                        (0039) export  PWM8_RightFwd_WritePulseWidth
                                        (0040) export _PWM8_RightFwd_WritePulseWidth
                                        (0041) export  PWM8_RightFwd_bReadPulseWidth
                                        (0042) export _PWM8_RightFwd_bReadPulseWidth
                                        (0043) export  PWM8_RightFwd_bReadCounter
                                        (0044) export _PWM8_RightFwd_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_RightFwd_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_RightFwd_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_RightFwd_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_RightFwd_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA cy8c28433_micromouse_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_RightFwd_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_RightFwd_EnableInt:
                                        (0091) _PWM8_RightFwd_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_RightFwd_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
056F: 7F       RET                      (0095)    ret
0570: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_RightFwd_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_RightFwd_DisableInt:
                                        (0119) _PWM8_RightFwd_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_RightFwd_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0573: 7F       RET                      (0123)    ret
0574: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_RightFwd_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_RightFwd_Start:
                                        (0148) _PWM8_RightFwd_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_RightFwd_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0577: 7F       RET                      (0152)    ret
0578: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_RightFwd_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_RightFwd_Stop:
                                        (0176) _PWM8_RightFwd_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_RightFwd_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
057B: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_RightFwd_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_RightFwd_WritePeriod:
                                        (0206) _PWM8_RightFwd_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
057C: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWM8_RightFwd_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
057E: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_RightFwd_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_RightFwd_WritePulseWidth:
                                        (0233) _PWM8_RightFwd_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
057F: 60 4A    MOV   REG[0x4A],A        (0235)    mov   reg[PWM8_RightFwd_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0581: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_RightFwd_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_RightFwd_bReadPulseWidth:
                                        (0260) _PWM8_RightFwd_bReadPulseWidth:
                                        (0261)  bPWM8_RightFwd_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bPWM8_RightFwd_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0582: 5D 4A    MOV   A,REG[0x4A]        (0264)    mov   A, reg[PWM8_RightFwd_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0584: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_RightFwd_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_RightFwd_bReadCounter:
                                        (0293) _PWM8_RightFwd_bReadCounter:
                                        (0294)  bPWM8_RightFwd_ReadCounter:                     ; this name deprecated
                                        (0295) _bPWM8_RightFwd_ReadCounter:                     ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0585: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0586: 5D 4A    MOV   A,REG[0x4A]        (0304)    mov   A, reg[PWM8_RightFwd_COMPARE_REG]       ; Save the Compare register on the stack
0588: 08       PUSH  A                  (0305)    push  A                                       ;
0589: 41 4B FE AND   REG[0x4B],0xFE     
058C: 71 10    OR    F,0x10             
                                        (0306)    PWM8_RightFwd_Stop_M                          ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
058E: 5D 49    MOV   A,REG[0x49]        (0308)    mov   A, reg[PWM8_RightFwd_INPUT_REG]         ; save the clock input setting
0590: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0591: 62 49 00 MOV   REG[0x49],0x0      (0311)    mov   reg[PWM8_RightFwd_INPUT_REG], INPUT_REG_NULL
0594: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0596: 5D 48    MOV   A,REG[0x48]        (0314)    mov   A, reg[PWM8_RightFwd_COUNTER_REG]       ; DR2 <- DR0
0598: 5D 4A    MOV   A,REG[0x4A]        (0315)    mov   A, reg[PWM8_RightFwd_COMPARE_REG]       ; Stash the Count on the stack
059A: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
059B: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
059D: 60 4A    MOV   REG[0x4A],A        (0318)    mov   reg[PWM8_RightFwd_COMPARE_REG], A
059F: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
05A1: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
05A3: 60 49    MOV   REG[0x49],A        (0321)    mov   reg[PWM8_RightFwd_INPUT_REG], A         ;
05A5: 70 EF    AND   F,0xEF             
05A7: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_RightFwd_Start_M                         ;   then re-enable the PWM.
05AA: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
05AB: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
05AD: 70 3F    AND   F,0x3F             
05AF: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
05B1: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_RightFwd.asm
FILE: lib\pwm8_pumpint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_PumpINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Pump.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Pump_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Pump_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Pump_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05B2: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_PumpINT.asm
FILE: lib\pwm8_leftrevint.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_LeftRevINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_LeftRev.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_LeftRev_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_LeftRev_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_LeftRev_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05B3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_LeftRevINT.asm
FILE: lib\pwm8_leftrev.asm              (0001) ;;*****************************************************************************
05B4: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_LeftRev.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_LeftRev.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_LeftRev_EnableInt
                                        (0030) export _PWM8_LeftRev_EnableInt
                                        (0031) export  PWM8_LeftRev_DisableInt
                                        (0032) export _PWM8_LeftRev_DisableInt
                                        (0033) export  PWM8_LeftRev_Start
                                        (0034) export _PWM8_LeftRev_Start
                                        (0035) export  PWM8_LeftRev_Stop
                                        (0036) export _PWM8_LeftRev_Stop
                                        (0037) export  PWM8_LeftRev_WritePeriod
                                        (0038) export _PWM8_LeftRev_WritePeriod
                                        (0039) export  PWM8_LeftRev_WritePulseWidth
                                        (0040) export _PWM8_LeftRev_WritePulseWidth
                                        (0041) export  PWM8_LeftRev_bReadPulseWidth
                                        (0042) export _PWM8_LeftRev_bReadPulseWidth
                                        (0043) export  PWM8_LeftRev_bReadCounter
                                        (0044) export _PWM8_LeftRev_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_LeftRev_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_LeftRev_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_LeftRev_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_LeftRev_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA cy8c28433_micromouse_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_LeftRev_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_LeftRev_EnableInt:
                                        (0091) _PWM8_LeftRev_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_LeftRev_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
05B7: 7F       RET                      (0095)    ret
05B8: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_LeftRev_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_LeftRev_DisableInt:
                                        (0119) _PWM8_LeftRev_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_LeftRev_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
05BB: 7F       RET                      (0123)    ret
05BC: 43 47 01 OR    REG[0x47],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_LeftRev_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_LeftRev_Start:
                                        (0148) _PWM8_LeftRev_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_LeftRev_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
05BF: 7F       RET                      (0152)    ret
05C0: 41 47 FE AND   REG[0x47],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_LeftRev_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_LeftRev_Stop:
                                        (0176) _PWM8_LeftRev_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_LeftRev_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
05C3: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_LeftRev_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_LeftRev_WritePeriod:
                                        (0206) _PWM8_LeftRev_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
05C4: 60 45    MOV   REG[0x45],A        (0208)    mov   reg[PWM8_LeftRev_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
05C6: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_LeftRev_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_LeftRev_WritePulseWidth:
                                        (0233) _PWM8_LeftRev_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
05C7: 60 46    MOV   REG[0x46],A        (0235)    mov   reg[PWM8_LeftRev_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
05C9: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_LeftRev_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_LeftRev_bReadPulseWidth:
                                        (0260) _PWM8_LeftRev_bReadPulseWidth:
                                        (0261)  bPWM8_LeftRev_ReadPulseWidth:                   ; this name deprecated
                                        (0262) _bPWM8_LeftRev_ReadPulseWidth:                   ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
05CA: 5D 46    MOV   A,REG[0x46]        (0264)    mov   A, reg[PWM8_LeftRev_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
05CC: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_LeftRev_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_LeftRev_bReadCounter:
                                        (0293) _PWM8_LeftRev_bReadCounter:
                                        (0294)  bPWM8_LeftRev_ReadCounter:                      ; this name deprecated
                                        (0295) _bPWM8_LeftRev_ReadCounter:                      ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
05CD: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
05CE: 5D 46    MOV   A,REG[0x46]        (0304)    mov   A, reg[PWM8_LeftRev_COMPARE_REG]        ; Save the Compare register on the stack
05D0: 08       PUSH  A                  (0305)    push  A                                       ;
05D1: 41 47 FE AND   REG[0x47],0xFE     
05D4: 71 10    OR    F,0x10             
                                        (0306)    PWM8_LeftRev_Stop_M                           ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
05D6: 5D 45    MOV   A,REG[0x45]        (0308)    mov   A, reg[PWM8_LeftRev_INPUT_REG]          ; save the clock input setting
05D8: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
05D9: 62 45 00 MOV   REG[0x45],0x0      (0311)    mov   reg[PWM8_LeftRev_INPUT_REG], INPUT_REG_NULL
05DC: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
05DE: 5D 44    MOV   A,REG[0x44]        (0314)    mov   A, reg[PWM8_LeftRev_COUNTER_REG]        ; DR2 <- DR0
05E0: 5D 46    MOV   A,REG[0x46]        (0315)    mov   A, reg[PWM8_LeftRev_COMPARE_REG]        ; Stash the Count on the stack
05E2: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
05E3: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
05E5: 60 46    MOV   REG[0x46],A        (0318)    mov   reg[PWM8_LeftRev_COMPARE_REG], A
05E7: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
05E9: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
05EB: 60 45    MOV   REG[0x45],A        (0321)    mov   reg[PWM8_LeftRev_INPUT_REG], A          ;
05ED: 70 EF    AND   F,0xEF             
05EF: 43 47 01 OR    REG[0x47],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_LeftRev_Start_M                          ;   then re-enable the PWM.
05F2: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
05F3: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
05F5: 70 3F    AND   F,0x3F             
05F7: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
05F9: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_LeftRev.asm
FILE: lib\pwm8_leftfwdint.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_LeftFwdINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_LeftFwd.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_LeftFwd_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_LeftFwd_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_LeftFwd_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05FA: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_LeftFwdINT.asm
FILE: lib\pwm8_leftfwd.asm              (0001) ;;*****************************************************************************
05FB: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_LeftFwd.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_LeftFwd.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_LeftFwd_EnableInt
                                        (0030) export _PWM8_LeftFwd_EnableInt
                                        (0031) export  PWM8_LeftFwd_DisableInt
                                        (0032) export _PWM8_LeftFwd_DisableInt
                                        (0033) export  PWM8_LeftFwd_Start
                                        (0034) export _PWM8_LeftFwd_Start
                                        (0035) export  PWM8_LeftFwd_Stop
                                        (0036) export _PWM8_LeftFwd_Stop
                                        (0037) export  PWM8_LeftFwd_WritePeriod
                                        (0038) export _PWM8_LeftFwd_WritePeriod
                                        (0039) export  PWM8_LeftFwd_WritePulseWidth
                                        (0040) export _PWM8_LeftFwd_WritePulseWidth
                                        (0041) export  PWM8_LeftFwd_bReadPulseWidth
                                        (0042) export _PWM8_LeftFwd_bReadPulseWidth
                                        (0043) export  PWM8_LeftFwd_bReadCounter
                                        (0044) export _PWM8_LeftFwd_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_LeftFwd_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_LeftFwd_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_LeftFwd_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_LeftFwd_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA cy8c28433_micromouse_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_LeftFwd_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_LeftFwd_EnableInt:
                                        (0091) _PWM8_LeftFwd_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_LeftFwd_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
05FE: 7F       RET                      (0095)    ret
05FF: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_LeftFwd_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_LeftFwd_DisableInt:
                                        (0119) _PWM8_LeftFwd_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_LeftFwd_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0602: 7F       RET                      (0123)    ret
0603: 43 4F 01 OR    REG[0x4F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_LeftFwd_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_LeftFwd_Start:
                                        (0148) _PWM8_LeftFwd_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_LeftFwd_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0606: 7F       RET                      (0152)    ret
0607: 41 4F FE AND   REG[0x4F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_LeftFwd_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_LeftFwd_Stop:
                                        (0176) _PWM8_LeftFwd_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_LeftFwd_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
060A: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_LeftFwd_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_LeftFwd_WritePeriod:
                                        (0206) _PWM8_LeftFwd_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
060B: 60 4D    MOV   REG[0x4D],A        (0208)    mov   reg[PWM8_LeftFwd_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
060D: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_LeftFwd_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_LeftFwd_WritePulseWidth:
                                        (0233) _PWM8_LeftFwd_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
060E: 60 4E    MOV   REG[0x4E],A        (0235)    mov   reg[PWM8_LeftFwd_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0610: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_LeftFwd_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_LeftFwd_bReadPulseWidth:
                                        (0260) _PWM8_LeftFwd_bReadPulseWidth:
                                        (0261)  bPWM8_LeftFwd_ReadPulseWidth:                   ; this name deprecated
                                        (0262) _bPWM8_LeftFwd_ReadPulseWidth:                   ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0611: 5D 4E    MOV   A,REG[0x4E]        (0264)    mov   A, reg[PWM8_LeftFwd_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0613: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_LeftFwd_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_LeftFwd_bReadCounter:
                                        (0293) _PWM8_LeftFwd_bReadCounter:
                                        (0294)  bPWM8_LeftFwd_ReadCounter:                      ; this name deprecated
                                        (0295) _bPWM8_LeftFwd_ReadCounter:                      ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0614: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0615: 5D 4E    MOV   A,REG[0x4E]        (0304)    mov   A, reg[PWM8_LeftFwd_COMPARE_REG]        ; Save the Compare register on the stack
0617: 08       PUSH  A                  (0305)    push  A                                       ;
0618: 41 4F FE AND   REG[0x4F],0xFE     
061B: 71 10    OR    F,0x10             
                                        (0306)    PWM8_LeftFwd_Stop_M                           ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
061D: 5D 4D    MOV   A,REG[0x4D]        (0308)    mov   A, reg[PWM8_LeftFwd_INPUT_REG]          ; save the clock input setting
061F: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0620: 62 4D 00 MOV   REG[0x4D],0x0      (0311)    mov   reg[PWM8_LeftFwd_INPUT_REG], INPUT_REG_NULL
0623: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0625: 5D 4C    MOV   A,REG[0x4C]        (0314)    mov   A, reg[PWM8_LeftFwd_COUNTER_REG]        ; DR2 <- DR0
0627: 5D 4E    MOV   A,REG[0x4E]        (0315)    mov   A, reg[PWM8_LeftFwd_COMPARE_REG]        ; Stash the Count on the stack
0629: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
062A: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
062C: 60 4E    MOV   REG[0x4E],A        (0318)    mov   reg[PWM8_LeftFwd_COMPARE_REG], A
062E: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0630: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0632: 60 4D    MOV   REG[0x4D],A        (0321)    mov   reg[PWM8_LeftFwd_INPUT_REG], A          ;
0634: 70 EF    AND   F,0xEF             
0636: 43 4F 01 OR    REG[0x4F],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_LeftFwd_Start_M                          ;   then re-enable the PWM.
0639: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
063A: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
063C: 70 3F    AND   F,0x3F             
063E: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0640: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_LeftFwd.asm
FILE: lib\ezi2csint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2CsINT.asm
                                        (0004) ;;  Version: 1.30, Updated on 2012/3/2 at 9:14:41
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "EzI2Cs.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    EzI2Cs_varPage      
                                        (0025) export   _EzI2Cs_varPage      
                                        (0026) 
                                        (0027) export    EzI2Cs_bState  
                                        (0028) export   _EzI2Cs_bState
                                        (0029) 
                                        (0030) export    EzI2Cs_bRAM_RWoffset
                                        (0031) export   _EzI2Cs_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    EzI2Cs_bRAM_RWcntr
                                        (0034) export   _EzI2Cs_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _EzI2Cs_pRAM_Buf_Addr_LSB
                                        (0037) export    EzI2Cs_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _EzI2Cs_pRAM_Buf_Addr_MSB
                                        (0041) export    EzI2Cs_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _EzI2Cs_bRAM_Buf_Size                                
                                        (0045) export    EzI2Cs_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _EzI2Cs_bRAM_Buf_WSize               
                                        (0048) export    EzI2Cs_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (EzI2Cs_ROM_ENABLE)
                                        (0051) export    EzI2Cs_bROM_RWoffset
                                        (0052) export   _EzI2Cs_bROM_RWoffset
                                        (0053) 
                                        (0054) export    EzI2Cs_bROM_RWcntr   
                                        (0055) export   _EzI2Cs_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _EzI2Cs_pROM_Buf_Addr_LSB
                                        (0058) export    EzI2Cs_pROM_Buf_Addr_LSB
                                        (0059) export   _EzI2Cs_pROM_Buf_Addr_MSB
                                        (0060) export    EzI2Cs_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _EzI2Cs_bROM_Buf_Size                           
                                        (0063) export    EzI2Cs_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    EzI2Cs_bBusy_Flag  
                                        (0068) export   _EzI2Cs_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _EzI2Cs_varPage:                                  ; This points to the variable page
                                        (0079)   EzI2Cs_varPage:          
                                        (0080) 
                                        (0081)  _EzI2Cs_bState:
                                        (0082)   EzI2Cs_bState:                             blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _EzI2Cs_bRAM_RWoffset:                            ; RAM address counter.  This is reset each time
                                        (0086)   EzI2Cs_bRAM_RWoffset:                      blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _EzI2Cs_bRAM_RWcntr:                              ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   EzI2Cs_bRAM_RWcntr:                        blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _EzI2Cs_pRAM_Buf_Addr_MSB:                        ; Base address (MSB) to RAM buffer.  
                                        (0094)   EzI2Cs_pRAM_Buf_Addr_MSB:                  blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _EzI2Cs_pRAM_Buf_Addr_LSB:                        ; Base address (LSB) to RAM buffer.  
                                        (0098)   EzI2Cs_pRAM_Buf_Addr_LSB:                  blk 1 ; 
                                        (0099) 
                                        (0100)  _EzI2Cs_bRAM_Buf_Size:                            ; Size of RAM buffer.   
                                        (0101)   EzI2Cs_bRAM_Buf_Size:                      blk 1 ; 
                                        (0102) 
                                        (0103)  _EzI2Cs_bRAM_Buf_WSize:                           ; Portion of the RAM buffer size that is writable.
                                        (0104)   EzI2Cs_bRAM_Buf_WSize:                     blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (EzI2Cs_ROM_ENABLE)
                                        (0108)  _EzI2Cs_bROM_RWoffset:                            ; ROM address counter.  This is reset each time
                                        (0109)   EzI2Cs_bROM_RWoffset:                      blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _EzI2Cs_bROM_RWcntr:                              ; ROM read counter. Keeps track of offset 
                                        (0112)   EzI2Cs_bROM_RWcntr:                        blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _EzI2Cs_pROM_Buf_Addr_MSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   EzI2Cs_pROM_Buf_Addr_MSB:                  blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _EzI2Cs_pROM_Buf_Addr_LSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   EzI2Cs_pROM_Buf_Addr_LSB:                  blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _EzI2Cs_bROM_Buf_Size:                            ; Size of RAM buffer.                            
                                        (0122)   EzI2Cs_bROM_Buf_Size:                      blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (EzI2Cs_AUTO_ADDR_CHECK^1)
                                        (0127) IF (EzI2Cs_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    EzI2Cs_bAddr
                                        (0130) export   _EzI2Cs_bAddr 
                                        (0131) 
                                        (0132)  _EzI2Cs_bAddr:
                                        (0133)   EzI2Cs_bAddr:                              blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _EzI2Cs_bBusy_Flag:
                                        (0138)   EzI2Cs_bBusy_Flag:                         blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for EzI2Cs_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _EzI2Cs_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  EzI2Cs_ISR:
                                        (0194) _EzI2Cs_ISR:
                                        (0195) 
0641: 08       PUSH  A                  (0196)     push A
0642: 10       PUSH  X                  (0197)     push X
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
0643: 45 04 08 XOR   REG[0x4],0x8       (0203) 	xor REG[4h],  8h
0646: 45 04 08 XOR   REG[0x4],0x8       (0204) 	xor REG[4h],  8h
0649: 70 3F    AND   F,0x3F             
064B: 71 80    OR    F,0x80             
064D: 5D D3    MOV   A,REG[0xD3]        
064F: 08       PUSH  A                  
0650: 5D D0    MOV   A,REG[0xD0]        
0652: 08       PUSH  A                  
0653: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0205)     ;---------------------------------------------------
                                        (0206)     ; Insert your custom code above this banner
                                        (0207)     ;---------------------------------------------------
                                        (0208)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0209) 
                                        (0210) ;; The folling conditional code is only valid when using the
                                        (0211) ;; large memory model.
                                        (0212) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0213)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
                                        (0214)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
                                        (0215)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
                                        (0216)    RAM_SETPAGE_CUR  >EzI2Cs_varPage      ; Set the current page mode Pointer
0656: 51 07    MOV   A,[0x7]            (0217)    mov   A, [EzI2Cs_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
0658: 60 D3    MOV   REG[0xD3],A        
                                        (0218)    RAM_SETPAGE_IDX A
                                        (0219) ENDIF
                                        (0220) 
065A: 2E 04 80 OR    [0x4],0x80         (0221)     or   [EzI2Cs_bState],EzI2Cs_ANY_ACTIVITY                         ; Set Activity flag
065D: 49 D7 08 TST   REG[0xD7],0x8      (0222)     tst  reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_ADDRESS                      ; Check for address
0660: A0 09    JZ    0x066A             (0223)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
0662: 26 04 F0 AND   [0x4],0xF0         (0224)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bits.                       
0665: 2E 04 00 OR    [0x4],0x0          (0225)     or   [EzI2Cs_bState],STATE_IDLE                                  ; Address flag set, change to IDLE state
0668: 80 08    JMP   0x0671             (0226)     jmp  .I2C_DO_STATE_MACHINE
                                        (0227) .I2C_CHECK_STOP:
                                        (0228)     ; Check for Stop condition here.  If a stop condition
                                        (0229)     ; exists, reset state machine to idle.
066A: 49 D7 20 TST   REG[0xD7],0x20     (0230)     tst reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_STOP_STATUS                   ; Check for Stop condition
066D: A0 03    JZ    0x0671             (0231)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
                                        (0232)     ; Following line was commented due to CDT#60202.
                                        (0233)     ; The stop bit is cleared by SetEzI2Cs_SCR macro, so the functionality related to EzI2Cs_bBusy_Flag is preserved.
                                        (0234)     ; and reg[EzI2Cs_SCR_REG],~EzI2Cs_SCR_STOP_STATUS                ; Clear Stop bit
066F: 80 9B    JMP   0x070B             (0235)     jmp  I2C_STATE_RESET
                                        (0236) .I2C_DO_STATE_MACHINE:
0671: 51 04    MOV   A,[0x4]            (0237)     mov  A,[EzI2Cs_bState]    ; Get State
0673: 21 0E    AND   A,0xE              (0238)     and  A,STATE_MASK                   ; Mask off invalid states
0675: E0 01    JACC  0x0677             (0239)     jacc I2C_STATE_JUMP_TABLE
                                        (0240) 
                                        (0241) I2C_STATE_JUMP_TABLE:
0677: 80 11    JMP   0x0689             (0242)     jmp  I2C_STATE_IDLE                 ; Idle state
0679: 80 5A    JMP   0x06D4             (0243)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
067B: 80 6C    JMP   0x06E8             (0244)     jmp  I2C_STATE_WR_RAM               ; 
067D: 80 3A    JMP   0x06B8             (0245)     jmp  I2C_STATE_RD_RAM
                                        (0246) IF (EzI2Cs_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0247)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0248)     jmp  I2C_STATE_RD_ROM
                                        (0249)     jmp  I2C_STATE_WR_ROM
                                        (0250) ELSE
067F: 80 8B    JMP   0x070B             (0251)     jmp  I2C_STATE_RESET
0681: 80 89    JMP   0x070B             (0252)     jmp  I2C_STATE_RESET
0683: 80 87    JMP   0x070B             (0253)     jmp  I2C_STATE_RESET
                                        (0254) ENDIF
0685: 80 85    JMP   0x070B             (0255)     jmp  I2C_STATE_RESET
                                        (0256) 
0687: 80 8C    JMP   0x0714             (0257)     jmp  EzI2Cs_ISR_END
                                        (0258) 
                                        (0259) 
                                        (0260)     ;            *** I2C Idle state ***
                                        (0261)     ;
                                        (0262)     ;   Sit idle until a start with address is issued.
                                        (0263)     ;   Check to see if there is an address match
                                        (0264)     ;     If address match, ACK the bus and determine next state
                                        (0265)     ;     Else NAK the transfer and return to idle state.
                                        (0266)     ;   Also check stop for condition.IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0267)     ;
                                        (0268) I2C_STATE_IDLE:                 ; Idle state
                                        (0269) 
                                        (0270) IF (EzI2Cs_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0271)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0272) IF (EzI2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0273)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
                                        (0274)     and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
                                        (0275)     cmp  A,[EzI2Cs_bAddr]                                            ; Check for proper Address
                                        (0276)     jz   .CHK_ADDR_MODE 
                                        (0277)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ; NAK Address 
                                        (0278)     jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                                        (0279) 
                                        (0280) ELSE    ;; STATIC ADDRESS
                                        (0281)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
                                        (0282)     and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
                                        (0283)     cmp  A,EzI2Cs_SLAVE_ADDR                                         ; Check for proper Address
                                        (0284)     jz   .CHK_ADDR_MODE 
                                        (0285)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ; NAK Address 
                                        (0286)     jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                                        (0287) ENDIF
                                        (0288) ENDIF
                                        (0289) 
                                        (0290) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0291) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0292)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_ALT_ADDR_BIT                      ; Check for Alt address
                                        (0293)     jnz  SERVICE_ROM_ADDR
                                        (0294) ENDIF
                                        (0295) 
                                        (0296) .STANDARD_ADDR:
0689: 49 D8 01 TST   REG[0xD8],0x1      (0297)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
068C: B0 0F    JNZ   0x069C             (0298)     jnz  .PREPARE_FOR_RAM_READ
                                        (0299) 
068E: 55 0B 02 MOV   [0xB],0x2          (0300)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_WRITE               ; Write transaction in process - set Busy flag to WRITE
                                        (0301) 
                                        (0302)     ; Prepare for RAM Write Address operation
0691: 26 04 F0 AND   [0x4],0xF0         (0303)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
0694: 2E 04 02 OR    [0x4],0x2          (0304)     or   [EzI2Cs_bState],STATE_WR_RAM_ADDR                           ; Set state machine to do RAM Write
0697: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0305)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Address 
069A: 80 79    JMP   0x0714             (0306)     jmp  EzI2Cs_ISR_END                                     ; Base address to RAM buffer.  
                                        (0307) 
                                        (0308) .PREPARE_FOR_RAM_READ:
069C: 55 0B 01 MOV   [0xB],0x1          (0309)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_READ                ; Possible read transaction in process - set Busy flag to READ
                                        (0310) 
069F: 26 04 F0 AND   [0x4],0xF0         (0311)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
06A2: 2E 04 06 OR    [0x4],0x6          (0312)     or   [EzI2Cs_bState],STATE_RD_RAM                                ; Set state machine to do RAM Read 
06A5: 5F 06 05 MOV   [0x6],[0x5]        (0313)     mov  [EzI2Cs_bRAM_RWcntr],[EzI2Cs_bRAM_RWoffset]                 ; Reset address counter to start of Offset
06A8: 51 08    MOV   A,[0x8]            (0314)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
06AA: 02 06    ADD   A,[0x6]            (0315)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
06AC: 5C       MOV   X,A                (0316)     mov  X,A                                                         ; Put offset in X
06AD: 52 00    MOV   A,[X+0]            (0317)     mov  A,[X]                                                       ; Get first byte to transmit
06AF: 60 D8    MOV   REG[0xD8],A        (0318)     mov  reg[EzI2Cs_DR_REG],A                               ; Base address to RAM buffer.  
06B1: 76 06    INC   [0x6]              (0319)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
06B3: 62 D7 14 MOV   REG[0xD7],0x14     
                                        (0320) 
                                        (0321)                                                                      ; ACK command and transmit first byte.
                                        (0322)     SetEzI2Cs_SCR (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT)   
06B6: 80 5D    JMP   0x0714             (0323)     jmp  EzI2Cs_ISR_END
                                        (0324) 
                                        (0325)     ;            *** I2C Read RAM state ***
                                        (0326)     ;
                                        (0327) I2C_STATE_RD_RAM:
                                        (0328)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0329)     ;---------------------------------------------------
                                        (0330)     ; Insert your custom code below this banner
                                        (0331)     ;---------------------------------------------------
                                        (0332)     
                                        (0333)     ;---------------------------------------------------
                                        (0334)     ; Insert your custom code above this banner
                                        (0335)     ;---------------------------------------------------
                                        (0336)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0337)     
06B8: 51 09    MOV   A,[0x9]            (0338)     mov  A,[EzI2Cs_bRAM_Buf_Size]
06BA: 78       DEC   A                  (0339)     dec  A
06BB: 3A 06    CMP   A,[0x6]            (0340)     cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
06BD: C0 0F    JC    0x06CD             (0341)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0342) 
06BF: 51 08    MOV   A,[0x8]            (0343)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
06C1: 02 06    ADD   A,[0x6]            (0344)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
06C3: 5C       MOV   X,A                (0345)     mov  X,A                                                         ; Put offset in X
06C4: 52 00    MOV   A,[X+0]            (0346)     mov  A,[X]                                                       ; Get first byte to transmit
06C6: 60 D8    MOV   REG[0xD8],A        (0347)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
06C8: 76 06    INC   [0x6]              (0348)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
06CA: 2E 04 20 OR    [0x4],0x20         (0349)     or   [EzI2Cs_bState],EzI2Cs_READ_ACTIVITY                        ; Set Read Activity flag
                                        (0350) 
                                        (0351) 
                                        (0352) .I2C_TRANSMIT_DATA:     
06CD: 60 D8    MOV   REG[0xD8],A        (0353)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
06CF: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0354)     SetEzI2Cs_SCR ( EzI2Cs_SCR_TRANSMIT )                            ; ACK command and transmit first byte. 
06D2: 80 41    JMP   0x0714             (0355)     jmp  EzI2Cs_ISR_END
                                        (0356) 
                                        (0357) 
                                        (0358)     ;            *** I2C Write RAM Address state ***
                                        (0359)     ;
                                        (0360)     ;  During this state, the RAM address offset is set.
                                        (0361) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
06D4: 5D D8    MOV   A,REG[0xD8]        (0362)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
06D6: 3A 09    CMP   A,[0x9]            (0363)     cmp  A,[EzI2Cs_bRAM_Buf_Size]                                    ; Check if out of range.
06D8: D0 2D    JNC   0x0706             (0364)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
06DA: A0 2B    JZ    0x0706             (0365)     jz   I2C_NAK_DATA
                                        (0366) 
                                        (0367)     ; Address in range
06DC: 53 06    MOV   [0x6],A            (0368)     mov  [EzI2Cs_bRAM_RWcntr],A                                      ; Reset address counter with new value
06DE: 53 05    MOV   [0x5],A            (0369)     mov  [EzI2Cs_bRAM_RWoffset],A                                    ; Set offset with new value.
06E0: 26 04 F0 AND   [0x4],0xF0         (0370)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
06E3: 2E 04 04 OR    [0x4],0x4          (0371)     or   [EzI2Cs_bState],STATE_WR_RAM                                ; Set state machine to do RAM Write
06E6: 80 1A    JMP   0x0701             (0372)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0373) 
                                        (0374) 
                                        (0375)     ;            *** I2C Write RAM state
                                        (0376) I2C_STATE_WR_RAM:  
                                        (0377)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0378)     ;---------------------------------------------------
                                        (0379)     ; Insert your custom code below this banner
                                        (0380)     ;---------------------------------------------------
                                        (0381)     
                                        (0382)     ;---------------------------------------------------
                                        (0383)     ; Insert your custom code above this banner
                                        (0384)     ;---------------------------------------------------
                                        (0385)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0386)     
06E8: 51 0A    MOV   A,[0xA]            (0387)     mov  A,[EzI2Cs_bRAM_Buf_WSize]                                   ; Get buffer size to make sure we
06EA: A0 1B    JZ    0x0706             (0388)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
06EC: 78       DEC   A                  (0389)     dec  A                                                           ; are in a valid area.
06ED: 3A 06    CMP   A,[0x6]            (0390)     cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
06EF: C0 16    JC    0x0706             (0391)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0392) 
06F1: 51 08    MOV   A,[0x8]            (0393)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
06F3: 02 06    ADD   A,[0x6]            (0394)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
06F5: 5C       MOV   X,A                (0395)     mov  X,A                                                         ; Put offset in X
                                        (0396) 
06F6: 5D D8    MOV   A,REG[0xD8]        (0397)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Read data to be written
06F8: 54 00    MOV   [X+0],A            (0398)     mov  [X],A                                                       ; Store data in Buffer
06FA: 2E 04 10 OR    [0x4],0x10         (0399)     or   [EzI2Cs_bState],EzI2Cs_WRITE_ACTIVITY                       ; Set Write Activity flag
06FD: 76 06    INC   [0x6]              (0400)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Advance pointer to next location
06FF: 80 01    JMP   0x0701             (0401)     jmp  I2C_ACK_DATA                         ; ACK the data
0701: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0402) 
                                        (0403)     
                                        (0404)     
                                        (0405) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0406) 
                                        (0407) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0408)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
                                        (0409)     jnz  PREPARE_FOR_ROM_READ
                                        (0410) 
                                        (0411)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_WRITE               ; Write transaction in process - set Busy flag to WRITE
                                        (0412)     
                                        (0413)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0414)     or   [EzI2Cs_bState],STATE_WR_ROM_ADDR                           ; Set state machine to do ROM ADDR Write
                                        (0415)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Address 
                                        (0416)     jmp  EzI2Cs_ISR_END                                    ; Base address to RAM buffer.  
                                        (0417) 
                                        (0418)     ; Prepare for Write ROM Address.              
                                        (0419) I2C_STATE_WR_ROM_ADDR:
                                        (0420)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
                                        (0421)     cmp  A,[EzI2Cs_bROM_Buf_Size]                                    ; Check if out of range.
                                        (0422)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0423)     jz   I2C_NAK_DATA
                                        (0424) 
                                        (0425)     mov  [EzI2Cs_bROM_RWcntr],A                                      ; Reset address counter with new value
                                        (0426)     mov  [EzI2Cs_bROM_RWoffset],A                                    ; Set offset with new value.
                                        (0427)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0428)     or   [EzI2Cs_bState],STATE_WR_ROM                                ; Set state machine to do ROM Write
                                        (0429)     jmp  I2C_ACK_DATA
                                        (0430) 
                                        (0431) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0432)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0433)    ;---------------------------------------------------
                                        (0434)    ; Insert your custom code below this banner
                                        (0435)    ;---------------------------------------------------
                                        (0436) 
                                        (0437)    ;---------------------------------------------------
                                        (0438)    ; Insert your custom code above this banner
                                        (0439)    ;---------------------------------------------------
                                        (0440)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0441) 
                                        (0442)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0443) 
                                        (0444) PREPARE_FOR_ROM_READ:
                                        (0445)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_READ                ; Possible read transaction in process - set Busy flag to READ
                                        (0446)     
                                        (0447)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0448)     or   [EzI2Cs_bState],STATE_RD_ROM                                ; Set state machine to do ROM Read 
                                        (0449)     mov  [EzI2Cs_bROM_RWcntr],[EzI2Cs_bROM_RWoffset]                 ; Reset address counter to start of Offset
                                        (0450)     mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                                        (0451)     mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                                        (0452)     add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                                        (0453)     jnc  .GET_ROM_VALUE
                                        (0454)     inc  X    ; Inc the MSB
                                        (0455) .GET_ROM_VALUE:
                                        (0456)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0457)     romx      ; Get Rom value in A
                                        (0458) 
                                        (0459)     mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0460)     inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                                        (0461) 
                                        (0462)                                                                      ; ACK command and transmit first byte.
                                        (0463)     SetEzI2Cs_SCR  (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT)   
                                        (0464)     jmp  EzI2Cs_ISR_END
                                        (0465) 
                                        (0466) 
                                        (0467) I2C_STATE_RD_ROM:
                                        (0468)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0469)     ;---------------------------------------------------
                                        (0470)     ; Insert your custom code below this banner
                                        (0471)     ;---------------------------------------------------
                                        (0472) 
                                        (0473)     ;---------------------------------------------------
                                        (0474)     ; Insert your custom code above this banner
                                        (0475)     ;---------------------------------------------------
                                        (0476)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0477) 
                                        (0478)     mov  A,[EzI2Cs_bROM_Buf_Size]
                                        (0479)     dec  A
                                        (0480)     cmp  A,[EzI2Cs_bROM_RWcntr]                                      ; Check to see if out of range.
                                        (0481)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0482) 
                                        (0483)     mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                                        (0484)     mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                                        (0485)     add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                                        (0486)     jnc  .GET_ROM_VALUE
                                        (0487)     inc  X    ; Inc the MSB
                                        (0488) .GET_ROM_VALUE:
                                        (0489)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0490)     romx      ; Get Rom value in A
                                        (0491)     mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0492)     inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                                        (0493) 
                                        (0494) .I2C_TRANSMIT_ROM_DATA:     
                                        (0495)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
                                        (0496)     SetEzI2Cs_SCR  (EzI2Cs_SCR_TRANSMIT)                             ; ACK command and transmit first byte. 
                                        (0497)     jmp  EzI2Cs_ISR_END
                                        (0498) 
                                        (0499) ENDIF
                                        (0500) 
                                        (0501) ;; Generic handlers
                                        (0502) 
                                        (0503) I2C_ACK_DATA:
                                        (0504)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Data
0704: 80 0F    JMP   0x0714             (0505)     jmp  EzI2Cs_ISR_END
0706: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0506) 
                                        (0507) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                                        (0508)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ;  NAK Data
0709: 80 0A    JMP   0x0714             (0509)     jmp  EzI2Cs_ISR_END
                                        (0510) 
                                        (0511) I2C_STATE_RESET:
                                        (0512)     ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
                                        (0513)     ;---------------------------------------------------
                                        (0514)     ; Insert your custom code below this banner
                                        (0515)     ;---------------------------------------------------
                                        (0516) 
                                        (0517)     ;---------------------------------------------------
                                        (0518)     ; Insert your custom code above this banner
                                        (0519)     ;---------------------------------------------------
                                        (0520)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0521) 
070B: 26 04 F0 AND   [0x4],0xF0         (0522)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
070E: 2E 04 00 OR    [0x4],0x0          (0523)     or   [EzI2Cs_bState], STATE_IDLE    ; Reset State
0711: 55 0B 00 MOV   [0xB],0x0          (0524)     mov [EzI2Cs_bBusy_Flag],EzI2Cs_I2C_FREE                          ; Clear Busy flag
0714: 18       POP   A                  
0715: 60 D0    MOV   REG[0xD0],A        
0717: 18       POP   A                  
0718: 60 D3    MOV   REG[0xD3],A        
                                        (0525)     ; Reset pointer buffers as well
                                        (0526)     ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
                                        (0527)     ;---------------------------------------------------
                                        (0528)     ; Insert your custom code below this banner
                                        (0529)     ;---------------------------------------------------
                                        (0530) 
                                        (0531)     ;---------------------------------------------------
                                        (0532)     ; Insert your custom code above this banner
                                        (0533)     ;---------------------------------------------------
                                        (0534)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0535) 
                                        (0536) EzI2Cs_ISR_END:
                                        (0537) 
                                        (0538) ; This conditional code is only used when using the large memory model.
                                        (0539) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0540)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
                                        (0541)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0542) ENDIF
071A: 20       POP   X                  (0543)     pop  X
071B: 18       POP   A                  (0544)     pop  A
                                        (0545) 
071C: 7E       RETI                     (0546)     reti
FILE: lib\ezi2cs.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
071D: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: EzI2Cs.asm
0720: 71 10    OR    F,0x10             
                                        (0004) ;;  Version: 1.30, Updated on 2012/3/2 at 9:14:41
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "EzI2Cs.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ; include instance specific register definitions
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) ;-----------------------------------------------
                                        (0032) ;  Global Symbols
                                        (0033) ;-----------------------------------------------
                                        (0034) ;-------------------------------------------------------------------
                                        (0035) ;  Declare the functions global for both assembler and C compiler.
                                        (0036) ;
                                        (0037) ;  Note that there are two names for each API. First name is
                                        (0038) ;  assembler reference. Name with underscore is name refence for
                                        (0039) ;  C compiler.  Calling function in C source code does not require
                                        (0040) ;  the underscore.
                                        (0041) ;-------------------------------------------------------------------
                                        (0042) 
                                        (0043) export    EzI2Cs_EnableInt
                                        (0044) export   _EzI2Cs_EnableInt
                                        (0045) export    EzI2Cs_ResumeInt
                                        (0046) export   _EzI2Cs_ResumeInt
                                        (0047) export    EzI2Cs_Start
                                        (0048) export   _EzI2Cs_Start
                                        (0049) 
                                        (0050) export    EzI2Cs_DisableInt
                                        (0051) export   _EzI2Cs_DisableInt
                                        (0052) export    EzI2Cs_Stop
                                        (0053) export   _EzI2Cs_Stop
                                        (0054) export    EzI2Cs_DisableSlave
                                        (0055) export   _EzI2Cs_DisableSlave
                                        (0056) export    EzI2Cs_SetRamBuffer
                                        (0057) export   _EzI2Cs_SetRamBuffer
                                        (0058) export    EzI2Cs_GetAddr
                                        (0059) export   _EzI2Cs_GetAddr
                                        (0060) export    EzI2Cs_GetActivity
                                        (0061) export   _EzI2Cs_GetActivity
                                        (0062) 
                                        (0063) 
                                        (0064) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0065) export    EzI2Cs_SetAddr
                                        (0066) export   _EzI2Cs_SetAddr
                                        (0067) ENDIF
                                        (0068) 
                                        (0069) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0070) export    EzI2Cs_SetRomBuffer
                                        (0071) export   _EzI2Cs_SetRomBuffer
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL, CON)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: EzI2Cs_Start
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;   Initialize the EzI2Cs I2C bus interface.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:
                                        (0088) ;
                                        (0089) ;  RETURNS: none
                                        (0090) ;
                                        (0091) ;  SIDE EFFECTS:
                                        (0092) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0093) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0094) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0095) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0096) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0097) ;          
                                        (0098) ;    Page Pointer Registers Modified: 
                                        (0099) ;          CUR_PP
                                        (0100) ;
                                        (0101) ;  THEORY of OPERATION or PROCEDURE:
                                        (0102) ;
                                        (0103) 
                                        (0104)  EzI2Cs_Start:
                                        (0105) _EzI2Cs_Start:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0108)    RAM_SETPAGE_CUR >EzI2Cs_varPage
                                        (0109)    
                                        (0110) IF (EzI2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0111) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0112)    mov  [EzI2Cs_bAddr],EzI2Cs_SLAVE_ADDR
                                        (0113) ENDIF   
                                        (0114) ENDIF
                                        (0115) 
                                        (0116)    M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
0722: 41 04 FC AND   REG[0x4],0xFC      (0117)    and reg[EzI2CsSDA_DriveMode_0_ADDR],~(EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0725: 43 05 03 OR    REG[0x5],0x3       (0118)    or  reg[EzI2CsSDA_DriveMode_1_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0728: 70 EF    AND   F,0xEF             
                                        (0119)    M8C_SetBank0
072A: 43 07 03 OR    REG[0x7],0x3       (0120)    or  reg[EzI2CsSDA_DriveMode_2_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
                                        (0121) 
072D: 55 04 00 MOV   [0x4],0x0          (0122)    mov  [EzI2Cs_bState],0x00    ;; Make sure state machine is initialized
0730: 55 0B 00 MOV   [0xB],0x0          (0123)    mov [EzI2Cs_bBusy_Flag],EzI2Cs_I2C_FREE ;; Clear Busy flag
                                        (0124) 
0733: 90 45    CALL  _EzI2Cs_EnableInt  (0125)    call EzI2Cs_EnableInt
0735: 90 4A    CALL  0x0781             (0126)    call EzI2Cs_EnableSlave
                                        (0127) 
0737: 40       NOP                      (0128)    nop
0738: 40       NOP                      (0129)    nop
0739: 40       NOP                      (0130)    nop
073A: 40       NOP                      (0131)    nop
073B: 40       NOP                      (0132)    nop
                                        (0133)    
073C: 50 00    MOV   A,0x0              (0134)    mov A, 0
073E: 53 05    MOV   [0x5],A            (0135)    mov [EzI2Cs_bRAM_RWoffset], A
0740: 71 10    OR    F,0x10             
                                        (0136) IF (EzI2Cs_ROM_ENABLE)
                                        (0137)    mov [EzI2Cs_bROM_RWoffset], A
                                        (0138) ENDIF
                                        (0139)    
                                        (0140)    M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
0742: 43 04 03 OR    REG[0x4],0x3       (0141)    or reg[EzI2CsSDA_DriveMode_0_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0745: 43 05 03 OR    REG[0x5],0x3       (0142)    or reg[EzI2CsSDA_DriveMode_1_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0748: 70 EF    AND   F,0xEF             
                                        (0143)    M8C_SetBank0
074A: 43 07 03 OR    REG[0x7],0x3       (0144)    or reg[EzI2CsSDA_DriveMode_2_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
                                        (0145) 
                                        (0146)    RAM_EPILOGUE RAM_USE_CLASS_4
074D: 7F       RET                      (0147)    ret
                                        (0148) 
                                        (0149) .ENDSECTION
                                        (0150) 
                                        (0151) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0152) .SECTION
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;  FUNCTION NAME: EzI2Cs_SetAddr(BYTE bAddr)
                                        (0155) ;
                                        (0156) ;  DESCRIPTION:
                                        (0157) ;   Set the I2C slave address for the EzI2Cs I2C bus interface.
                                        (0158) ;
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;
                                        (0161) ;  ARGUMENTS:
                                        (0162) ;      A =>  Slave address
                                        (0163) ;
                                        (0164) ;  RETURNS: none
                                        (0165) ;
                                        (0166) ;  SIDE EFFECTS;    
                                        (0167) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0168) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0169) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0170) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0171) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0172) ;          
                                        (0173) ;    Page Pointer Registers Modified: 
                                        (0174) ;          CUR_PP
                                        (0175) ;
                                        (0176) ;  THEORY of OPERATION or PROCEDURE:
                                        (0177) ;
                                        (0178) 
                                        (0179)  EzI2Cs_SetAddr:
                                        (0180) _EzI2Cs_SetAddr:
                                        (0181)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0182) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0183)    RAM_SETPAGE_CUR >EzI2Cs_bAddr
                                        (0184)    asl   A
                                        (0185)    mov   [EzI2Cs_bAddr],A
                                        (0186) ELSE                          ;; write to the ADDR register instead
                                        (0187)    RAM_PROLOGUE RAM_USE_CLASS_2
074E: 21 7F    AND   A,0x7F             (0188)    and  A, ~EzI2Cs_HW_ADDR_MASK	; verify address value
0750: 4F       MOV   X,SP               (0189)    mov  X, SP
0751: 08       PUSH  A                  (0190)    push A                                   ; store address value
0752: 71 10    OR    F,0x10             
                                        (0191)    M8C_SetBank1               ;; Set Bank 1
0754: 5D AD    MOV   A,REG[0xAD]        (0192)    mov  A, reg[EzI2Cs_ADDR_REG]   ; get value from address register
0756: 21 80    AND   A,0x80             (0193)    and  A, EzI2Cs_HW_ADDR_MASK    ; define highest bit
0758: 2B 00    OR    A,[X+0]            (0194)    or   A, [X]                              ; form address value 	
075A: 60 AD    MOV   REG[0xAD],A        (0195)    mov  reg[EzI2Cs_ADDR_REG], A   ; set new address value to register
075C: 70 EF    AND   F,0xEF             
                                        (0196)    M8C_SetBank0               ;; Set Bank 0
075E: 18       POP   A                  (0197)    pop  A
075F: 70 3F    AND   F,0x3F             
0761: 71 C0    OR    F,0xC0             
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0199) ENDIF
                                        (0200)    RAM_EPILOGUE RAM_USE_CLASS_4
0763: 7F       RET                      (0201)    ret
0764: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) ENDIF
                                        (0205) 
                                        (0206) .SECTION
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME:BYTE EzI2Cs_GetActivity(void)
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:
                                        (0211) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0212) ;    The activity flag will be cleared if set when calling this function.
                                        (0213) ;
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;
                                        (0216) ;  ARGUMENTS:  none
                                        (0217) ;
                                        (0218) ;  RETURNS: 
                                        (0219) ;    BYTE  non-zero = Activity
                                        (0220) ;          zero     = No Activity
                                        (0221) ;
                                        (0222) ;  SIDE EFFECTS;    
                                        (0223) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0224) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0225) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0226) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0227) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0228) ;          
                                        (0229) ;    Page Pointer Registers Modified: 
                                        (0230) ;          CUR_PP
                                        (0231) ;
                                        (0232) ;  THEORY of OPERATION or PROCEDURE:
                                        (0233) ;
                                        (0234) 
                                        (0235)  EzI2Cs_GetActivity:
                                        (0236) _EzI2Cs_GetActivity:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0238)    RAM_SETPAGE_CUR >EzI2Cs_bState
0767: 51 04    MOV   A,[0x4]            (0239)    mov   A,[EzI2Cs_bState]
0769: 21 B0    AND   A,0xB0             (0240)    and   A,EzI2Cs_ACTIVITY_MASK         ; Mask off activity bits
076B: 26 04 4F AND   [0x4],0x4F         (0241)    and   [EzI2Cs_bState],~EzI2Cs_ACTIVITY_MASK ; Clear system activity bits
                                        (0242) 
                                        (0243) EzI2Cs_GetActivity_End:
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_4
076E: 7F       RET                      (0245)    ret
076F: 71 10    OR    F,0x10             
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) .SECTION
                                        (0250) ;-----------------------------------------------------------------------------
                                        (0251) ;  FUNCTION NAME: BYTE EzI2Cs_GetAddr(Void)
                                        (0252) ;
                                        (0253) ;  DESCRIPTION:
                                        (0254) ;   Get the I2C slave address for the EzI2Cs I2C bus interface.
                                        (0255) ;
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS: none
                                        (0259) ;
                                        (0260) ;  RETURNS: none
                                        (0261) ;
                                        (0262) ;  SIDE EFFECTS;    
                                        (0263) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0264) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0265) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0266) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0267) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0268) ;          
                                        (0269) ;    Page Pointer Registers Modified: 
                                        (0270) ;          CUR_PP
                                        (0271) ;
                                        (0272) ;
                                        (0273) ;  THEORY of OPERATION or PROCEDURE:
                                        (0274) ;
                                        (0275) 
                                        (0276)  EzI2Cs_GetAddr:
                                        (0277) _EzI2Cs_GetAddr:
                                        (0278) 
                                        (0279) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0280)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0281) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0282)    RAM_SETPAGE_CUR >EzI2Cs_bAddr
                                        (0283)    mov   A,[EzI2Cs_bAddr]
                                        (0284)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0285) ELSE                          ;; read the address from ADDR register instead
                                        (0286)    M8C_SetBank1               ;; Set Bank 1 
0771: 5D AD    MOV   A,REG[0xAD]        (0287)    mov A, reg[EzI2Cs_ADDR_REG]
0773: 70 EF    AND   F,0xEF             
                                        (0288)    M8C_SetBank0               ;; Set Bank 0
                                        (0289) ENDIF
0775: 21 7F    AND   A,0x7F             (0290)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0291)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0292) ELSE
                                        (0293)    mov   A,0x0            
                                        (0294) ENDIF
0777: 7F       RET                      (0295)    ret
                                        (0296) 
                                        (0297) .ENDSECTION
                                        (0298) 
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: EzI2Cs_EnableInt
                                        (0304) ;  FUNCTION NAME: EzI2Cs_ResumeInt
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0307) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0308) ;	  EzI2Cs_ResumeInt performs the enable int function without fist clearing
                                        (0309) ;     pending interrupts.
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: none
                                        (0313) ;
                                        (0314) ;  RETURNS: none
                                        (0315) ;
                                        (0316) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0317) ;
                                        (0318) ;  THEORY of OPERATION or PROCEDURE:
                                        (0319) ;
                                        (0320)  EzI2Cs_ResumeInt:
                                        (0321) _EzI2Cs_ResumeInt:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_1
0778: 80 04    JMP   0x077D             (0323)    jmp   ResumeEntry
                                        (0324) 
                                        (0325)  EzI2Cs_EnableInt:
                                        (0326) _EzI2Cs_EnableInt:
                                        (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0328)    ;first clear any pending interrupts
077A: 41 DD FE AND   REG[0xDD],0xFE     (0329)    and   reg[INT_CLR3], ~EzI2Cs_INT_MASK   
077D: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0330) ResumeEntry:
                                        (0331)    M8C_EnableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0332)    RAM_EPILOGUE RAM_USE_CLASS_1
0780: 7F       RET                      (0333)    ret
                                        (0334) 
                                        (0335) .ENDSECTION
                                        (0336) 
                                        (0337) .SECTION
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;  FUNCTION NAME: EzI2Cs_EnableSlave
                                        (0340) ;
                                        (0341) ;  DESCRIPTION:
                                        (0342) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0343) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0344) ;
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;
                                        (0347) ;  ARGUMENTS: none
                                        (0348) ;
                                        (0349) ;  RETURNS: none
                                        (0350) ;
                                        (0351) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;
                                        (0353) ;  THEORY of OPERATION or PROCEDURE:
                                        (0354) ;
                                        (0355) 
                                        (0356)  EzI2Cs_EnableSlave:
                                        (0357) _EzI2Cs_EnableSlave:
                                        (0358) 
                                        (0359)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0360)     
                                        (0361)     IF (EzI2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0362)     ; Save original CPU clock speed
                                        (0363)     M8C_SetBank1          ; Set Bank 1 
                                        (0364)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0365)     push A                ; Save OSC_CR0 configuration
                                        (0366)     and  A,0xF8           ; Mask off CPU speed
                                        (0367)     or   A,0x05           ; Set clock to 750KHz
                                        (0368)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0369)     M8C_SetBank0          ; Back to Bank 0
                                        (0370)     ENDIF 
                                        (0371)     ; Enable I2C Slave
                                        (0372)     IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0373)     M8C_SetBank1
                                        (0374)     or   reg[EzI2Cs_CFG_REG],(EzI2Cs_CFG_Slave_EN | EzI2Cs_CFG_BUS_ERROR_IE | EzI2Cs_CFG_STOP_IE)
                                        (0375)     M8C_SetBank0
                                        (0376)     ELSE
0781: 43 D6 31 OR    REG[0xD6],0x31     (0377)     or   reg[EzI2Cs_CFG_REG],(EzI2Cs_CFG_Slave_EN | EzI2Cs_CFG_BUS_ERROR_IE | EzI2Cs_CFG_STOP_IE)
                                        (0378)     ENDIF
                                        (0379)     IF (EzI2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0380)     ; Restore original CPU clock speed
                                        (0381)     pop  A
                                        (0382)     M8C_SetBank1          ; Set Bank 1
                                        (0383)     mov  reg[OSC_CR0],A   ; Restore
                                        (0384)     M8C_SetBank0          ; Back to Bank 0
                                        (0385)     ENDIF    
                                        (0386)     RAM_EPILOGUE RAM_USE_CLASS_1
0784: 7F       RET                      (0387)     ret
0785: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0388) 
                                        (0389) .ENDSECTION
                                        (0390) 
                                        (0391) .SECTION
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  FUNCTION NAME: EzI2Cs_DisableInt
                                        (0394) ;  FUNCTION NAME: EzI2Cs_Stop
                                        (0395) ;
                                        (0396) ;  DESCRIPTION:
                                        (0397) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0398) ;
                                        (0399) ;-----------------------------------------------------------------------------
                                        (0400) ;
                                        (0401) ;  ARGUMENTS: none
                                        (0402) ;
                                        (0403) ;  RETURNS: none
                                        (0404) ;
                                        (0405) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0406) ;
                                        (0407) ;  THEORY of OPERATION or PROCEDURE:
                                        (0408) ;
                                        (0409) 
                                        (0410)  EzI2Cs_Stop:
                                        (0411) _EzI2Cs_Stop:
                                        (0412)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0413) 
                                        (0414)    M8C_DisableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0415)    IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0416)    M8C_SetBank1
                                        (0417)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0418)    M8C_SetBank0
                                        (0419)    ELSE
0788: 41 D6 FE AND   REG[0xD6],0xFE     (0420)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0421)    ENDIF
                                        (0422)    RAM_EPILOGUE RAM_USE_CLASS_1
078B: 7F       RET                      (0423)    ret
078C: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0424) 
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) 
                                        (0429) .SECTION
                                        (0430) ;-----------------------------------------------------------------------------
                                        (0431) ;  FUNCTION NAME: EzI2Cs_DisableInt
                                        (0432) ;  FUNCTION NAME: EzI2Cs_Stop
                                        (0433) ;
                                        (0434) ;  DESCRIPTION:
                                        (0435) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0436) ;
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;
                                        (0439) ;  ARGUMENTS: none
                                        (0440) ;
                                        (0441) ;  RETURNS: none
                                        (0442) ;
                                        (0443) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0444) ;
                                        (0445) ;  THEORY of OPERATION or PROCEDURE:
                                        (0446) ;
                                        (0447) 
                                        (0448)  EzI2Cs_DisableInt:
                                        (0449) _EzI2Cs_DisableInt:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0451)    M8C_DisableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0452)    RAM_EPILOGUE RAM_USE_CLASS_1
078F: 7F       RET                      (0453)    ret
                                        (0454) 
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: EzI2Cs_DisableSlave
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS: none
                                        (0467) ;
                                        (0468) ;  RETURNS: none
                                        (0469) ;
                                        (0470) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0471) ;
                                        (0472) ;  THEORY of OPERATION or PROCEDURE:
                                        (0473) ;
                                        (0474) 
                                        (0475)  EzI2Cs_DisableSlave:
                                        (0476) _EzI2Cs_DisableSlave:
                                        (0477)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0478)    IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0479)    M8C_SetBank1
                                        (0480)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0481)    M8C_SetBank0
                                        (0482)    ELSE
0790: 41 D6 FE AND   REG[0xD6],0xFE     (0483)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0484)    ENDIF
                                        (0485)    RAM_EPILOGUE RAM_USE_CLASS_1
0793: 7F       RET                      (0486)    ret
0794: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0487) 
                                        (0488) .ENDSECTION
                                        (0489) 
                                        (0490) .SECTION
                                        (0491) ;-----------------------------------------------------------------------------
                                        (0492) ;  FUNCTION NAME: 
                                        (0493) ;          void EzI2Cs_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0494) ;
                                        (0495) ;  DESCRIPTION:
                                        (0496) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0497) ;
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;
                                        (0500) ;  ARGUMENTS: 
                                        (0501) ;     [SP-3] =>  Size of data structure
                                        (0502) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0503) ;     [SP-5] =>  LSB of data pointer
                                        (0504) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0505) ;
                                        (0506) ;  RETURNS: none
                                        (0507) ;
                                        (0508) ;  SIDE EFFECTS;    
                                        (0509) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0510) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0511) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0512) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0513) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0514) ;          
                                        (0515) ;    Page Pointer Registers Modified: 
                                        (0516) ;          CUR_PP
                                        (0517) ;
                                        (0518) ;  THEORY of OPERATION or PROCEDURE:
                                        (0519) ;
                                        (0520) 
                                        (0521) ; Stack offset constants
                                        (0522) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0523) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0524) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0525) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0526) 
                                        (0527)  EzI2Cs_SetRamBuffer:
                                        (0528) _EzI2Cs_SetRamBuffer:
                                        (0529) 
                                        (0530)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0531)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0532)     RAM_SETPAGE_CUR >EzI2Cs_bRAM_Buf_Size    ; Set page to global var page.
                                        (0533)                                                         ; All these globals should be
                                        (0534)                                                         ; on the same page.          
0797: 4F       MOV   X,SP               (0535)     mov   X,SP
0798: 52 FD    MOV   A,[X-3]            (0536)     mov   A,[X+RAMBUF_SIZE]
079A: 53 09    MOV   [0x9],A            (0537)     mov   [EzI2Cs_bRAM_Buf_Size],A           ; Store the buffer size
                                        (0538) 
079C: 52 FC    MOV   A,[X-4]            (0539)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
079E: 53 0A    MOV   [0xA],A            (0540)     mov   [EzI2Cs_bRAM_Buf_WSize],A          ; 
                                        (0541)     
07A0: 52 FB    MOV   A,[X-5]            (0542)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
07A2: 53 08    MOV   [0x8],A            (0543)     mov   [EzI2Cs_pRAM_Buf_Addr_LSB],A       ; 
                                        (0544) 
                                        (0545) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0546)                                                            ; if in the large memory Model
07A4: 52 FA    MOV   A,[X-6]            (0547)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
07A6: 53 07    MOV   [0x7],A            (0548)     mov   [EzI2Cs_pRAM_Buf_Addr_MSB],A       ; 
07A8: 70 3F    AND   F,0x3F             
07AA: 71 C0    OR    F,0xC0             
                                        (0549) ENDIF
                                        (0550) 
                                        (0551)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0552)     RAM_EPILOGUE RAM_USE_CLASS_4
07AC: 7F       RET                      (0553)     ret
                                        (0554) 
                                        (0555) .ENDSECTION
                                        (0556) 
                                        (0557) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0558) .SECTION
                                        (0559) ;-----------------------------------------------------------------------------
                                        (0560) ;  FUNCTION NAME: 
                                        (0561) ;          void EzI2Cs_SetRomBuffer(BYTE bSize, BYTE * pAddr)
                                        (0562) ;
                                        (0563) ;  DESCRIPTION:
                                        (0564) ;     Sets the location and size of the I2C ROM buffer.          
                                        (0565) ;
                                        (0566) ;-----------------------------------------------------------------------------
                                        (0567) ;
                                        (0568) ;  ARGUMENTS: 
                                        (0569) ;     [SP-3] =>  Size of data const data structure
                                        (0570) ;     [SP-4] =>  LSB of data pointer
                                        (0571) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
                                        (0572) ;
                                        (0573) ;  RETURNS: none
                                        (0574) ;
                                        (0575) ;  SIDE EFFECTS;    
                                        (0576) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0577) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0578) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0579) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0580) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0581) ;          
                                        (0582) ;    Page Pointer Registers Modified: 
                                        (0583) ;          CUR_PP
                                        (0584) ;
                                        (0585) ;  THEORY of OPERATION or PROCEDURE:
                                        (0586) ;
                                        (0587) 
                                        (0588) ; Stack offset constants
                                        (0589) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0590) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
                                        (0591) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
                                        (0592) 
                                        (0593)  EzI2Cs_SetRomBuffer:
                                        (0594) _EzI2Cs_SetRomBuffer:
                                        (0595) 
                                        (0596)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0597)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0598)     RAM_SETPAGE_CUR >EzI2Cs_bROM_Buf_Size    ; Set page to global var page.
                                        (0599)                                                         ; All these globals should be
                                        (0600)                                                         ; on the same page.          
                                        (0601)     mov   X,SP
                                        (0602)     mov   A,[X+ROMBUF_SIZE]
                                        (0603)     mov   [EzI2Cs_bROM_Buf_Size],A           ; Store the buffer size
                                        (0604) 
                                        (0605)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
                                        (0606)     mov   [EzI2Cs_pROM_Buf_Addr_LSB],A       ; 
                                        (0607)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
                                        (0608)     mov   [EzI2Cs_pROM_Buf_Addr_MSB],A       ; 
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0610)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0611)     ret
                                        (0612) 
                                        (0613) .ENDSECTION
                                        (0614) ENDIF
                                        (0615) 
                                        (0616) ; End of File EzI2Cs.asm
FILE: lib\counter16_tickint.asm         (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_TickINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2012/3/2 at 9:13:9
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16_Tick.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_Tick_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_Tick_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_Tick_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
07AD: 7D 0C 70 LJMP  _TICK_ISR          (0071)    ljmp _TICK_ISR
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom assembly code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _TICK_ISR
                                        (0084)    ; RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
07B0: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file Counter16_TickINT.asm
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\adc.c
(0001) #include "adc.h"
(0002) 
(0003) unsigned int adcIRLeftDark;
(0004) unsigned int adcIRRightDark;
(0005) unsigned int adcIRFrontDark;
(0006) 
(0007) unsigned int adcIRLeft;
(0008) unsigned int adcIRRight;
(0009) unsigned int adcIRFront;
(0010) 
(0011) unsigned int adcUser;
(0012) 
(0013) void ADC_Init(void)
(0014) {
(0015) 	IR_Emitter_Off();
__UserModules_end|_ADC_Init|__text_start|_ADC_Init:
    07B1: 41 04 FB AND   REG[0x4],0xFB
(0016) 	
(0017) 	SAR10_EnableInt(); // Enable SAR10 interrupt
    07B4: 10       PUSH  X
    07B5: 7C 04 7E LCALL _SAR10_EnableInt
(0018) 	SAR10_Start();     // Power on SAR10 block
    07B8: 7C 04 86 LCALL _SAR10_Start
    07BB: 20       POP   X
    07BC: 7F       RET   
(0019) 
(0020) }
(0021) 
(0022) void ADC_Update(void)
(0023) {
(0024) 	if (IR_Emitter_Powered)
_ADC_Update:
    07BD: 5D 04    MOV   A,REG[0x4]
    07BF: 62 D0 00 MOV   REG[0xD0],0x0
    07C2: 53 1D    MOV   [__r0],A
    07C4: 47 1D 04 TST   [__r0],0x4
    07C7: A0 C3    JZ    0x088B
(0025) 	{
(0026) 		// ------------ Read reflected light levels ------------
(0027) 		
(0028) 		SAR10_SetADCChannel(ADC_CHAN_IR_FRONT);
    07C9: 10       PUSH  X
    07CA: 50 00    MOV   A,0x0
    07CC: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0029) 		SAR10_Trigger();                     // Trigger new sample
    07CF: 7C 04 96 LCALL _SAR10_Trigger
    07D2: 20       POP   X
(0030) 		while(SAR10_fIsDataAvailable()==0);  // Wait while data is not ready
    07D3: 10       PUSH  X
    07D4: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    07D7: 20       POP   X
    07D8: 62 D0 00 MOV   REG[0xD0],0x0
    07DB: 39 00    CMP   A,0x0
    07DD: AF F5    JZ    0x07D3
(0031) 		adcIRFront = SAR10_iGetData();       // Read result
    07DF: 10       PUSH  X
    07E0: 7C 04 A7 LCALL _SAR10_iGetData
    07E3: 62 D0 00 MOV   REG[0xD0],0x0
    07E6: 5A 1D    MOV   [__r0],X
    07E8: 20       POP   X
    07E9: 08       PUSH  A
    07EA: 51 1D    MOV   A,[__r0]
    07EC: 62 D0 00 MOV   REG[0xD0],0x0
    07EF: 53 22    MOV   [adcIRFront],A
    07F1: 18       POP   A
    07F2: 53 23    MOV   [adcIRFront+1],A
(0032) 		adcIRFront -= adcIRFrontDark;        // Correct reading for ambient lighting
    07F4: 62 D0 00 MOV   REG[0xD0],0x0
    07F7: 51 29    MOV   A,[adcIRFrontDark+1]
    07F9: 62 D0 00 MOV   REG[0xD0],0x0
    07FC: 14 23    SUB   [adcIRFront+1],A
    07FE: 62 D0 00 MOV   REG[0xD0],0x0
    0801: 51 28    MOV   A,[adcIRFrontDark]
    0803: 62 D0 00 MOV   REG[0xD0],0x0
    0806: 1C 22    SBB   [adcIRFront],A
(0033) 		
(0034) 		SAR10_SetADCChannel(ADC_CHAN_IR_LEFT);
    0808: 10       PUSH  X
    0809: 50 08    MOV   A,0x8
    080B: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0035) 		SAR10_Trigger();                     // Trigger new sample
    080E: 7C 04 96 LCALL _SAR10_Trigger
    0811: 20       POP   X
(0036) 		while(SAR10_fIsDataAvailable()==0);  // Wait while data is not ready
    0812: 10       PUSH  X
    0813: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    0816: 20       POP   X
    0817: 62 D0 00 MOV   REG[0xD0],0x0
    081A: 39 00    CMP   A,0x0
    081C: AF F5    JZ    0x0812
(0037) 		adcIRLeft = SAR10_iGetData();        // Read result
    081E: 10       PUSH  X
    081F: 7C 04 A7 LCALL _SAR10_iGetData
    0822: 62 D0 00 MOV   REG[0xD0],0x0
    0825: 5A 1D    MOV   [__r0],X
    0827: 20       POP   X
    0828: 08       PUSH  A
    0829: 51 1D    MOV   A,[__r0]
    082B: 62 D0 00 MOV   REG[0xD0],0x0
    082E: 53 2C    MOV   [adcIRLeft],A
    0830: 18       POP   A
    0831: 53 2D    MOV   [adcIRLeft+1],A
(0038) 		adcIRLeft -= adcIRLeftDark;          // Correct reading for ambient lighting
    0833: 62 D0 00 MOV   REG[0xD0],0x0
    0836: 51 27    MOV   A,[adcIRLeftDark+1]
    0838: 62 D0 00 MOV   REG[0xD0],0x0
    083B: 14 2D    SUB   [adcIRLeft+1],A
    083D: 62 D0 00 MOV   REG[0xD0],0x0
    0840: 51 26    MOV   A,[adcIRLeftDark]
    0842: 62 D0 00 MOV   REG[0xD0],0x0
    0845: 1C 2C    SBB   [adcIRLeft],A
(0039) 		
(0040) 		SAR10_SetADCChannel(ADC_CHAN_IR_RIGHT);
    0847: 10       PUSH  X
    0848: 50 10    MOV   A,0x10
    084A: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0041) 		SAR10_Trigger();                     // Trigger new sample
    084D: 7C 04 96 LCALL _SAR10_Trigger
    0850: 20       POP   X
(0042) 		while(SAR10_fIsDataAvailable()==0);  // Wait while data is not ready
    0851: 10       PUSH  X
    0852: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    0855: 20       POP   X
    0856: 62 D0 00 MOV   REG[0xD0],0x0
    0859: 39 00    CMP   A,0x0
    085B: AF F5    JZ    0x0851
(0043) 		adcIRRight = SAR10_iGetData();       // Read result
    085D: 10       PUSH  X
    085E: 7C 04 A7 LCALL _SAR10_iGetData
    0861: 62 D0 00 MOV   REG[0xD0],0x0
    0864: 5A 1D    MOV   [__r0],X
    0866: 20       POP   X
    0867: 08       PUSH  A
    0868: 51 1D    MOV   A,[__r0]
    086A: 62 D0 00 MOV   REG[0xD0],0x0
    086D: 53 1E    MOV   [adcIRRight],A
    086F: 18       POP   A
    0870: 53 1F    MOV   [adcIRRight+1],A
(0044) 		adcIRRight -= adcIRRightDark;        // Correct reading for ambient lighting
    0872: 62 D0 00 MOV   REG[0xD0],0x0
    0875: 51 25    MOV   A,[adcIRRightDark+1]
    0877: 62 D0 00 MOV   REG[0xD0],0x0
    087A: 14 1F    SUB   [adcIRRight+1],A
    087C: 62 D0 00 MOV   REG[0xD0],0x0
    087F: 51 24    MOV   A,[adcIRRightDark]
    0881: 62 D0 00 MOV   REG[0xD0],0x0
    0884: 1C 1E    SBB   [adcIRRight],A
(0045) 		
(0046) 		IR_Emitter_Off();
    0886: 41 04 FB AND   REG[0x4],0xFB
(0047) 	}
    0889: 80 C2    JMP   0x094C
(0048) 	else
(0049) 	{	
(0050) 		//------------ Read ambient light levels ------------
(0051) 		
(0052) 		SAR10_SetADCChannel(ADC_CHAN_USER);
    088B: 10       PUSH  X
    088C: 50 30    MOV   A,0x30
    088E: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0053) 		SAR10_Trigger();                      // Trigger new sample
    0891: 7C 04 96 LCALL _SAR10_Trigger
    0894: 20       POP   X
(0054) 		while(SAR10_fIsDataAvailable()==0);   //Wait while data is not ready
    0895: 10       PUSH  X
    0896: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    0899: 20       POP   X
    089A: 62 D0 00 MOV   REG[0xD0],0x0
    089D: 39 00    CMP   A,0x0
    089F: AF F5    JZ    0x0895
(0055) 		adcUser = SAR10_iGetData();           // Read result
    08A1: 10       PUSH  X
    08A2: 7C 04 A7 LCALL _SAR10_iGetData
    08A5: 62 D0 00 MOV   REG[0xD0],0x0
    08A8: 5A 1D    MOV   [__r0],X
    08AA: 20       POP   X
    08AB: 08       PUSH  A
    08AC: 51 1D    MOV   A,[__r0]
    08AE: 62 D0 00 MOV   REG[0xD0],0x0
    08B1: 53 20    MOV   [adcUser],A
    08B3: 18       POP   A
    08B4: 53 21    MOV   [adcUser+1],A
(0056) 	
(0057) 		SAR10_SetADCChannel(ADC_CHAN_IR_FRONT);
    08B6: 10       PUSH  X
    08B7: 50 00    MOV   A,0x0
    08B9: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0058) 		SAR10_Trigger();                      // Trigger new sample
    08BC: 7C 04 96 LCALL _SAR10_Trigger
    08BF: 20       POP   X
(0059) 		while(SAR10_fIsDataAvailable()==0);   //Wait while data is not ready
    08C0: 10       PUSH  X
    08C1: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    08C4: 20       POP   X
    08C5: 62 D0 00 MOV   REG[0xD0],0x0
    08C8: 39 00    CMP   A,0x0
    08CA: AF F5    JZ    0x08C0
(0060) 		adcIRFrontDark = SAR10_iGetData();    // Read result
    08CC: 10       PUSH  X
    08CD: 7C 04 A7 LCALL _SAR10_iGetData
    08D0: 62 D0 00 MOV   REG[0xD0],0x0
    08D3: 5A 1D    MOV   [__r0],X
    08D5: 20       POP   X
    08D6: 08       PUSH  A
    08D7: 51 1D    MOV   A,[__r0]
    08D9: 62 D0 00 MOV   REG[0xD0],0x0
    08DC: 53 28    MOV   [adcIRFrontDark],A
    08DE: 18       POP   A
    08DF: 53 29    MOV   [adcIRFrontDark+1],A
(0061) 		adcIRFrontDark += ADC_OFFSET_IR_FRONT;// Apply offset
    08E1: 06 29 30 ADD   [adcIRFrontDark+1],0x30
    08E4: 0E 28 00 ADC   [adcIRFrontDark],0x0
(0062) 		
(0063) 		SAR10_SetADCChannel(ADC_CHAN_IR_LEFT);
    08E7: 10       PUSH  X
    08E8: 50 08    MOV   A,0x8
    08EA: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0064) 		SAR10_Trigger();                      // Trigger new sample
    08ED: 7C 04 96 LCALL _SAR10_Trigger
    08F0: 20       POP   X
(0065) 		while(SAR10_fIsDataAvailable()==0);   //Wait while data is not ready
    08F1: 10       PUSH  X
    08F2: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    08F5: 20       POP   X
    08F6: 62 D0 00 MOV   REG[0xD0],0x0
    08F9: 39 00    CMP   A,0x0
    08FB: AF F5    JZ    0x08F1
(0066) 		adcIRLeftDark = SAR10_iGetData();     // Read result
    08FD: 10       PUSH  X
    08FE: 7C 04 A7 LCALL _SAR10_iGetData
    0901: 62 D0 00 MOV   REG[0xD0],0x0
    0904: 5A 1D    MOV   [__r0],X
    0906: 20       POP   X
    0907: 08       PUSH  A
    0908: 51 1D    MOV   A,[__r0]
    090A: 62 D0 00 MOV   REG[0xD0],0x0
    090D: 53 26    MOV   [adcIRLeftDark],A
    090F: 18       POP   A
    0910: 53 27    MOV   [adcIRLeftDark+1],A
(0067) 		adcIRLeftDark += ADC_OFFSET_IR_LEFT;  // Apply offset
    0912: 06 27 41 ADD   [adcIRLeftDark+1],0x41
    0915: 0E 26 00 ADC   [adcIRLeftDark],0x0
(0068) 		
(0069) 		SAR10_SetADCChannel(ADC_CHAN_IR_RIGHT);
    0918: 10       PUSH  X
    0919: 50 10    MOV   A,0x10
    091B: 7C 04 B6 LCALL _SAR10_SetADCChannel
(0070) 		SAR10_Trigger();                      // Trigger new sample
    091E: 7C 04 96 LCALL _SAR10_Trigger
    0921: 20       POP   X
(0071) 		while(SAR10_fIsDataAvailable()==0);   //Wait while data is not ready
    0922: 10       PUSH  X
    0923: 7C 04 9E LCALL _SAR10_fIsDataAvailable
    0926: 20       POP   X
    0927: 62 D0 00 MOV   REG[0xD0],0x0
    092A: 39 00    CMP   A,0x0
    092C: AF F5    JZ    0x0922
(0072) 		adcIRRightDark = SAR10_iGetData();    // Read result
    092E: 10       PUSH  X
    092F: 7C 04 A7 LCALL _SAR10_iGetData
    0932: 62 D0 00 MOV   REG[0xD0],0x0
    0935: 5A 1D    MOV   [__r0],X
    0937: 20       POP   X
    0938: 08       PUSH  A
    0939: 51 1D    MOV   A,[__r0]
    093B: 62 D0 00 MOV   REG[0xD0],0x0
    093E: 53 24    MOV   [adcIRRightDark],A
    0940: 18       POP   A
    0941: 53 25    MOV   [adcIRRightDark+1],A
(0073) 		adcIRRightDark += ADC_OFFSET_IR_RIGHT;// Apply offset
    0943: 06 25 C3 ADD   [adcIRRightDark+1],0xC3
    0946: 0E 24 00 ADC   [adcIRRightDark],0x0
(0074) 		
(0075) 		IR_Emitter_On();
    0949: 43 04 04 OR    REG[0x4],0x4
(0076) 	}
    094C: 7F       RET   
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "motor.h"
(0008) #include "ui.h"
(0009) #include "adc.h"
(0010) #include "sched.h"
(0011) 
(0012) #pragma data:page1  // Gets RAM page 1 all to itself
(0013) unsigned char mazeA[256];
(0014) #pragma data:page2  // Gets RAM page 2 all to itself
(0015) unsigned char mazeB[256];
(0016) #pragma data:page0
(0017) //unsigned char mystack[256];
(0018) #pragma data:data 
(0019) 
(0020) 
(0021) void main(void)
(0022) {
(0023) 	// -------------------- Setup --------------------
(0024) 	
(0025) 	M8C_EnableGInt; // Enable Global Interrupts
_main:
    094D: 71 01    OR    F,0x1
(0026) 	
(0027) 	// motor.h
(0028) 	Encoder_Init();
    094F: 7C 0B 0B LCALL _Encoder_Init
(0029) 	Motor_Init();
    0952: 7C 0B 30 LCALL _Motor_Init
(0030) 	
(0031) 	// ui.h
(0032) 	LED_Init();
    0955: 7C 0C DF LCALL _LED_Init
(0033) 	I2C_Init();
    0958: 7C 0C E9 LCALL _I2C_Init
(0034) 	
(0035) 	// adc.h
(0036) 	ADC_Init();
    095B: 7C 07 B1 LCALL __UserModules_end|_ADC_Init|__text_start|_ADC_Init
(0037) 
(0038) 	// sched.h
(0039) 	Sched_Init();
    095E: 7C 0B FB LCALL _Sched_Init
(0040) 
(0041) 	SleepTimer_Start();
    0961: 10       PUSH  X
    0962: 7C 04 23 LCALL _SleepTimer_Start
(0042) 	SleepTimer_EnableInt();
    0965: 7C 04 1B LCALL _SleepTimer_EnableInt
(0043) 
(0044) 	// ------------------ End Setup ------------------
(0045) 
(0046) 	//while(1)
(0047) 	//{
(0048) //		Encoder_PauseCount();
(0049) //		if (encoderCountLeft > encoderCountRight)
(0050) //		{
(0051) //			PWM8_LeftFwd_WritePulseWidth(0);
(0052) //			PWM8_LeftRev_WritePulseWidth(255);
(0053) //		}
(0054) //		else if (encoderCountLeft < encoderCountRight)
(0055) //		{
(0056) //			PWM8_LeftFwd_WritePulseWidth(255);
(0057) //			PWM8_LeftRev_WritePulseWidth(0);
(0058) //		}
(0059) //		else
(0060) //		{
(0061) //			PWM8_LeftFwd_WritePulseWidth(0);
(0062) //			PWM8_LeftRev_WritePulseWidth(0);
(0063) //		}
(0064) //		Encoder_ResumeCount();
(0065) 	//}
(0066) 	
(0067) 	SleepTimer_SyncWait(8, SleepTimer_WAIT_RELOAD);
    0968: 57 00    MOV   X,0x0
    096A: 50 08    MOV   A,0x8
    096C: 7C 04 5A LCALL _SleepTimer_SyncWait
    096F: 20       POP   X
    0970: 80 04    JMP   0x0975
(0068) 	
(0069) 	while(1)
(0070) 	{
(0071) 		Sched_RunQueue();
    0972: 7C 0C 20 LCALL _Sched_RunQueue
(0072) 	}
    0975: 8F FC    JMP   0x0972
(0073) }
(0074) 
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\motion.c
(0001) #include "motion.h"
(0002) 
(0003) int _motion_lastEncoderCountLeft;
(0004) 
(0005) void Motion_Init(void)
(0006) {
_Motion_Init:
    0979: 7F       RET   
(0007) }
(0008) 
(0009) void Motion_Update(void)
(0010) { 
_Motion_Update:
  _drivePower          --> X+0
    097A: 10       PUSH  X
    097B: 4F       MOV   X,SP
    097C: 38 02    ADD   SP,0x2
(0011) 	int _drivePower = 255 - (adcIRFront);
    097E: 62 D0 00 MOV   REG[0xD0],0x0
    0981: 50 FF    MOV   A,0xFF
    0983: 12 23    SUB   A,[adcIRFront+1]
    0985: 62 D0 00 MOV   REG[0xD0],0x0
    0988: 53 1C    MOV   [__r1],A
    098A: 50 00    MOV   A,0x0
    098C: 62 D0 00 MOV   REG[0xD0],0x0
    098F: 1A 22    SBB   A,[adcIRFront]
    0991: 62 D0 00 MOV   REG[0xD0],0x0
    0994: 53 1D    MOV   [__r0],A
    0996: 51 1C    MOV   A,[__r1]
    0998: 54 01    MOV   [X+1],A
    099A: 51 1D    MOV   A,[__r0]
    099C: 54 00    MOV   [X+0],A
(0012) 	Motor_Drive_Left(_drivePower);
    099E: 52 00    MOV   A,[X+0]
    09A0: 08       PUSH  A
    09A1: 52 01    MOV   A,[X+1]
    09A3: 08       PUSH  A
    09A4: 7C 0B 45 LCALL _Motor_Drive_Left
(0013) 	Motor_Drive_Right(_drivePower);
    09A7: 52 00    MOV   A,[X+0]
    09A9: 08       PUSH  A
    09AA: 52 01    MOV   A,[X+1]
    09AC: 08       PUSH  A
    09AD: 7C 0B A0 LCALL _Motor_Drive_Right
    09B0: 38 FC    ADD   SP,0xFC
    09B2: 38 FE    ADD   SP,0xFE
    09B4: 20       POP   X
    09B5: 7F       RET   
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\motor.c
(0001) #include "motor.h"
(0002) 
(0003) EncoderCounts encoderCount;
(0004) 
(0005) char _quadratureState;
(0006) char _previousQuadratureStateLeft;
(0007) char _previousQuadratureStateRight;
(0008) 
(0009) void GPIO_ISR(void)
(0010) {
_GPIO_ISR:
    09B6: 71 C0    OR    F,0xC0
    09B8: 08       PUSH  A
    09B9: 5D D0    MOV   A,REG[0xD0]
    09BB: 08       PUSH  A
(0011) 	LED_Right_On();
    09BC: 41 00 DF AND   REG[0x0],0xDF
(0012) 	_quadratureState = _quadrature_left();
    09BF: 5D 04    MOV   A,REG[0x4]
    09C1: 21 50    AND   A,0x50
    09C3: 62 D0 00 MOV   REG[0xD0],0x0
    09C6: 53 2F    MOV   [_quadratureState],A
(0013) 	if (_quadratureState != _previousQuadratureStateLeft)
    09C8: 51 2F    MOV   A,[_quadratureState]
    09CA: 62 D0 00 MOV   REG[0xD0],0x0
    09CD: 3A 2E    CMP   A,[_previousQuadratureStateLeft]
    09CF: A0 91    JZ    0x0A61
(0014) 	{
(0015) 		if (_quadratureState == QUADRATURE_STATE_LEFT_1)
    09D1: 62 D0 00 MOV   REG[0xD0],0x0
    09D4: 3C 2F 00 CMP   [_quadratureState],0x0
    09D7: B0 1D    JNZ   0x09F5
(0016) 		{
(0017) 			if (_previousQuadratureStateLeft == QUADRATURE_STATE_LEFT_4)
    09D9: 62 D0 00 MOV   REG[0xD0],0x0
    09DC: 3C 2E 40 CMP   [_previousQuadratureStateLeft],0x40
    09DF: B0 0B    JNZ   0x09EB
(0018) 				encoderCount.left++;
    09E1: 62 D0 00 MOV   REG[0xD0],0x0
    09E4: 76 18    INC   [encoderCount+1]
    09E6: 0E 17 00 ADC   [encoderCount],0x0
    09E9: 80 6D    JMP   0x0A57
(0019) 			else
(0020) 				encoderCount.left--;
    09EB: 62 D0 00 MOV   REG[0xD0],0x0
    09EE: 7A 18    DEC   [encoderCount+1]
    09F0: 1E 17 00 SBB   [encoderCount],0x0
(0021) 		}
    09F3: 80 63    JMP   0x0A57
(0022) 		else if (_quadratureState == QUADRATURE_STATE_LEFT_2)
    09F5: 62 D0 00 MOV   REG[0xD0],0x0
    09F8: 3C 2F 10 CMP   [_quadratureState],0x10
    09FB: B0 1D    JNZ   0x0A19
(0023) 		{
(0024) 			if (_previousQuadratureStateLeft == QUADRATURE_STATE_LEFT_1)
    09FD: 62 D0 00 MOV   REG[0xD0],0x0
    0A00: 3C 2E 00 CMP   [_previousQuadratureStateLeft],0x0
    0A03: B0 0B    JNZ   0x0A0F
(0025) 				encoderCount.left++;
    0A05: 62 D0 00 MOV   REG[0xD0],0x0
    0A08: 76 18    INC   [encoderCount+1]
    0A0A: 0E 17 00 ADC   [encoderCount],0x0
    0A0D: 80 49    JMP   0x0A57
(0026) 			else
(0027) 				encoderCount.left--;
    0A0F: 62 D0 00 MOV   REG[0xD0],0x0
    0A12: 7A 18    DEC   [encoderCount+1]
    0A14: 1E 17 00 SBB   [encoderCount],0x0
(0028) 		}
    0A17: 80 3F    JMP   0x0A57
(0029) 		else if (_quadratureState == QUADRATURE_STATE_LEFT_3)
    0A19: 62 D0 00 MOV   REG[0xD0],0x0
    0A1C: 3C 2F 50 CMP   [_quadratureState],0x50
    0A1F: B0 1D    JNZ   0x0A3D
(0030) 		{
(0031) 			if (_previousQuadratureStateLeft == QUADRATURE_STATE_LEFT_2)
    0A21: 62 D0 00 MOV   REG[0xD0],0x0
    0A24: 3C 2E 10 CMP   [_previousQuadratureStateLeft],0x10
    0A27: B0 0B    JNZ   0x0A33
(0032) 				encoderCount.left++;
    0A29: 62 D0 00 MOV   REG[0xD0],0x0
    0A2C: 76 18    INC   [encoderCount+1]
    0A2E: 0E 17 00 ADC   [encoderCount],0x0
    0A31: 80 25    JMP   0x0A57
(0033) 			else
(0034) 				encoderCount.left--;
    0A33: 62 D0 00 MOV   REG[0xD0],0x0
    0A36: 7A 18    DEC   [encoderCount+1]
    0A38: 1E 17 00 SBB   [encoderCount],0x0
(0035) 		}
    0A3B: 80 1B    JMP   0x0A57
(0036) 		else
(0037) 		{
(0038) 			if (_previousQuadratureStateLeft == QUADRATURE_STATE_LEFT_3)
    0A3D: 62 D0 00 MOV   REG[0xD0],0x0
    0A40: 3C 2E 50 CMP   [_previousQuadratureStateLeft],0x50
    0A43: B0 0B    JNZ   0x0A4F
(0039) 				encoderCount.left++;
    0A45: 62 D0 00 MOV   REG[0xD0],0x0
    0A48: 76 18    INC   [encoderCount+1]
    0A4A: 0E 17 00 ADC   [encoderCount],0x0
    0A4D: 80 09    JMP   0x0A57
(0040) 			else
(0041) 				encoderCount.left--;
    0A4F: 62 D0 00 MOV   REG[0xD0],0x0
    0A52: 7A 18    DEC   [encoderCount+1]
    0A54: 1E 17 00 SBB   [encoderCount],0x0
(0042) 		}
(0043) 		_previousQuadratureStateLeft = _quadratureState;
    0A57: 62 D0 00 MOV   REG[0xD0],0x0
    0A5A: 51 2F    MOV   A,[_quadratureState]
    0A5C: 62 D0 00 MOV   REG[0xD0],0x0
    0A5F: 53 2E    MOV   [_previousQuadratureStateLeft],A
(0044) 	}
(0045) 	
(0046) 	_quadratureState = _quadrature_right();
    0A61: 5D 04    MOV   A,REG[0x4]
    0A63: 21 A0    AND   A,0xA0
    0A65: 62 D0 00 MOV   REG[0xD0],0x0
    0A68: 53 2F    MOV   [_quadratureState],A
(0047) 	if (_quadratureState != _previousQuadratureStateRight)
    0A6A: 51 2F    MOV   A,[_quadratureState]
    0A6C: 62 D0 00 MOV   REG[0xD0],0x0
    0A6F: 3A 30    CMP   A,[_previousQuadratureStateRight]
    0A71: A0 91    JZ    0x0B03
(0048) 	{
(0049) 		if (_quadratureState == QUADRATURE_STATE_RIGHT_1)
    0A73: 62 D0 00 MOV   REG[0xD0],0x0
    0A76: 3C 2F 00 CMP   [_quadratureState],0x0
    0A79: B0 1D    JNZ   0x0A97
(0050) 		{
(0051) 			if (_previousQuadratureStateRight == QUADRATURE_STATE_RIGHT_4)
    0A7B: 62 D0 00 MOV   REG[0xD0],0x0
    0A7E: 3C 30 20 CMP   [_previousQuadratureStateRight],0x20
    0A81: B0 0B    JNZ   0x0A8D
(0052) 				encoderCount.right++;
    0A83: 62 D0 00 MOV   REG[0xD0],0x0
    0A86: 76 1A    INC   [encoderCount+3]
    0A88: 0E 19 00 ADC   [encoderCount+2],0x0
    0A8B: 80 6D    JMP   0x0AF9
(0053) 			else
(0054) 				encoderCount.right--;
    0A8D: 62 D0 00 MOV   REG[0xD0],0x0
    0A90: 7A 1A    DEC   [encoderCount+3]
    0A92: 1E 19 00 SBB   [encoderCount+2],0x0
(0055) 		}
    0A95: 80 63    JMP   0x0AF9
(0056) 		else if (_quadratureState == QUADRATURE_STATE_RIGHT_2)
    0A97: 62 D0 00 MOV   REG[0xD0],0x0
    0A9A: 3C 2F 80 CMP   [_quadratureState],0x80
    0A9D: B0 1D    JNZ   0x0ABB
(0057) 		{
(0058) 			if (_previousQuadratureStateRight == QUADRATURE_STATE_RIGHT_1)
    0A9F: 62 D0 00 MOV   REG[0xD0],0x0
    0AA2: 3C 30 00 CMP   [_previousQuadratureStateRight],0x0
    0AA5: B0 0B    JNZ   0x0AB1
(0059) 				encoderCount.right++;
    0AA7: 62 D0 00 MOV   REG[0xD0],0x0
    0AAA: 76 1A    INC   [encoderCount+3]
    0AAC: 0E 19 00 ADC   [encoderCount+2],0x0
    0AAF: 80 49    JMP   0x0AF9
(0060) 			else
(0061) 				encoderCount.right--;
    0AB1: 62 D0 00 MOV   REG[0xD0],0x0
    0AB4: 7A 1A    DEC   [encoderCount+3]
    0AB6: 1E 19 00 SBB   [encoderCount+2],0x0
(0062) 		}
    0AB9: 80 3F    JMP   0x0AF9
(0063) 		else if (_quadratureState == QUADRATURE_STATE_RIGHT_3)
    0ABB: 62 D0 00 MOV   REG[0xD0],0x0
    0ABE: 3C 2F A0 CMP   [_quadratureState],0xA0
    0AC1: B0 1D    JNZ   0x0ADF
(0064) 		{
(0065) 			if (_previousQuadratureStateRight == QUADRATURE_STATE_RIGHT_2)
    0AC3: 62 D0 00 MOV   REG[0xD0],0x0
    0AC6: 3C 30 80 CMP   [_previousQuadratureStateRight],0x80
    0AC9: B0 0B    JNZ   0x0AD5
(0066) 				encoderCount.right++;
    0ACB: 62 D0 00 MOV   REG[0xD0],0x0
    0ACE: 76 1A    INC   [encoderCount+3]
    0AD0: 0E 19 00 ADC   [encoderCount+2],0x0
    0AD3: 80 25    JMP   0x0AF9
(0067) 			else
(0068) 				encoderCount.right--;
    0AD5: 62 D0 00 MOV   REG[0xD0],0x0
    0AD8: 7A 1A    DEC   [encoderCount+3]
    0ADA: 1E 19 00 SBB   [encoderCount+2],0x0
(0069) 		}
    0ADD: 80 1B    JMP   0x0AF9
(0070) 		else
(0071) 		{
(0072) 			if (_previousQuadratureStateRight == QUADRATURE_STATE_RIGHT_3)
    0ADF: 62 D0 00 MOV   REG[0xD0],0x0
    0AE2: 3C 30 A0 CMP   [_previousQuadratureStateRight],0xA0
    0AE5: B0 0B    JNZ   0x0AF1
(0073) 				encoderCount.right++;
    0AE7: 62 D0 00 MOV   REG[0xD0],0x0
    0AEA: 76 1A    INC   [encoderCount+3]
    0AEC: 0E 19 00 ADC   [encoderCount+2],0x0
    0AEF: 80 09    JMP   0x0AF9
(0074) 			else
(0075) 				encoderCount.right--;
    0AF1: 62 D0 00 MOV   REG[0xD0],0x0
    0AF4: 7A 1A    DEC   [encoderCount+3]
    0AF6: 1E 19 00 SBB   [encoderCount+2],0x0
(0076) 		}
(0077) 		_previousQuadratureStateRight = _quadratureState;
    0AF9: 62 D0 00 MOV   REG[0xD0],0x0
    0AFC: 51 2F    MOV   A,[_quadratureState]
    0AFE: 62 D0 00 MOV   REG[0xD0],0x0
    0B01: 53 30    MOV   [_previousQuadratureStateRight],A
(0078) 	}
(0079) 	LED_Right_Off();
    0B03: 43 00 20 OR    REG[0x0],0x20
    0B06: 18       POP   A
    0B07: 60 D0    MOV   REG[0xD0],A
    0B09: 18       POP   A
    0B0A: 7E       RETI  
(0080) }
(0081) 
(0082) void Encoder_Init(void)
(0083) {
(0084) 	encoderCount.left  = 0;
_Encoder_Init:
    0B0B: 62 D0 00 MOV   REG[0xD0],0x0
    0B0E: 55 18 00 MOV   [encoderCount+1],0x0
    0B11: 55 17 00 MOV   [encoderCount],0x0
(0085) 	encoderCount.right = 0;
    0B14: 55 1A 00 MOV   [encoderCount+3],0x0
    0B17: 55 19 00 MOV   [encoderCount+2],0x0
(0086) 	
(0087) 	_previousQuadratureStateLeft = _quadrature_left();   // Initialize left encoder state machine
    0B1A: 5D 04    MOV   A,REG[0x4]
    0B1C: 21 50    AND   A,0x50
    0B1E: 62 D0 00 MOV   REG[0xD0],0x0
    0B21: 53 2E    MOV   [_previousQuadratureStateLeft],A
(0088) 	_previousQuadratureStateRight = _quadrature_right(); // Initialize right encoder state machine
    0B23: 5D 04    MOV   A,REG[0x4]
    0B25: 21 A0    AND   A,0xA0
    0B27: 62 D0 00 MOV   REG[0xD0],0x0
    0B2A: 53 30    MOV   [_previousQuadratureStateRight],A
(0089) 
(0090) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);         // Enable GPIO interrupts
    0B2C: 43 E0 20 OR    REG[0xE0],0x20
    0B2F: 7F       RET   
(0091) }
(0092) 
(0093) void Motor_Init(void)
(0094) {
(0095) 	// Start motor PWMs
(0096) 	PWM8_LeftFwd_Start();
_Motor_Init:
    0B30: 10       PUSH  X
    0B31: 7C 06 03 LCALL _PWM8_LeftFwd_Start
(0097) 	PWM8_LeftRev_Start();
    0B34: 7C 05 BC LCALL _PWM8_LeftRev_Start
(0098) 	PWM8_RightFwd_Start();
    0B37: 7C 05 74 LCALL _PWM8_RightFwd_Start
(0099) 	PWM8_RightRev_Start();
    0B3A: 7C 05 2D LCALL _PWM8_RightRev_Start
    0B3D: 20       POP   X
(0100) 
(0101) 	motor_left_enable();
    0B3E: 43 08 02 OR    REG[0x8],0x2
(0102) 	motor_right_enable();
    0B41: 43 08 01 OR    REG[0x8],0x1
    0B44: 7F       RET   
(0103) }
(0104) 
(0105) void Motor_Drive_Left(int power)
(0106) {
_Motor_Drive_Left:
  power                --> X-5
    0B45: 10       PUSH  X
    0B46: 4F       MOV   X,SP
(0107) 	if (power > 0)
    0B47: 50 00    MOV   A,0x0
    0B49: 13 FC    SUB   A,[X-4]
    0B4B: 52 FB    MOV   A,[X-5]
    0B4D: 31 80    XOR   A,0x80
    0B4F: 62 D0 00 MOV   REG[0xD0],0x0
    0B52: 53 1B    MOV   [__rX],A
    0B54: 50 80    MOV   A,0x80
    0B56: 1A 1B    SBB   A,[__rX]
    0B58: D0 26    JNC   0x0B7F
(0108) 	{
(0109) 		if (power > 255) power = 255;
    0B5A: 50 FF    MOV   A,0xFF
    0B5C: 13 FC    SUB   A,[X-4]
    0B5E: 52 FB    MOV   A,[X-5]
    0B60: 31 80    XOR   A,0x80
    0B62: 62 D0 00 MOV   REG[0xD0],0x0
    0B65: 53 1B    MOV   [__rX],A
    0B67: 50 80    MOV   A,0x80
    0B69: 1A 1B    SBB   A,[__rX]
    0B6B: D0 07    JNC   0x0B73
    0B6D: 56 FC FF MOV   [X-4],0xFF
    0B70: 56 FB 00 MOV   [X-5],0x0
(0110) 		PWM8_LeftFwd_COMPARE_REG = power;
    0B73: 62 D0 00 MOV   REG[0xD0],0x0
    0B76: 52 FC    MOV   A,[X-4]
    0B78: 60 4E    MOV   REG[0x4E],A
(0111) 		PWM8_LeftRev_COMPARE_REG = 0;
    0B7A: 62 46 00 MOV   REG[0x46],0x0
(0112) 	}
    0B7D: 80 20    JMP   0x0B9E
(0113) 	else
(0114) 	{
(0115) 		if (power < -255) power = -255;
    0B7F: 52 FC    MOV   A,[X-4]
    0B81: 11 01    SUB   A,0x1
    0B83: 52 FB    MOV   A,[X-5]
    0B85: 31 80    XOR   A,0x80
    0B87: 19 7F    SBB   A,0x7F
    0B89: D0 07    JNC   0x0B91
    0B8B: 56 FC 01 MOV   [X-4],0x1
    0B8E: 56 FB FF MOV   [X-5],0xFF
(0116) 		PWM8_LeftFwd_COMPARE_REG = 0;
    0B91: 62 4E 00 MOV   REG[0x4E],0x0
(0117) 		PWM8_LeftRev_COMPARE_REG = -power;
    0B94: 62 D0 00 MOV   REG[0xD0],0x0
    0B97: 52 FC    MOV   A,[X-4]
    0B99: 73       CPL   A
    0B9A: 11 FF    SUB   A,0xFF
    0B9C: 60 46    MOV   REG[0x46],A
(0118) 	}
    0B9E: 20       POP   X
    0B9F: 7F       RET   
(0119) }
(0120) 
(0121) void Motor_Drive_Right(int power)
(0122) {
_Motor_Drive_Right:
  power                --> X-5
    0BA0: 10       PUSH  X
    0BA1: 4F       MOV   X,SP
(0123) 	if (power > 0)
    0BA2: 50 00    MOV   A,0x0
    0BA4: 13 FC    SUB   A,[X-4]
    0BA6: 52 FB    MOV   A,[X-5]
    0BA8: 31 80    XOR   A,0x80
    0BAA: 62 D0 00 MOV   REG[0xD0],0x0
    0BAD: 53 1B    MOV   [__rX],A
    0BAF: 50 80    MOV   A,0x80
    0BB1: 1A 1B    SBB   A,[__rX]
    0BB3: D0 26    JNC   0x0BDA
(0124) 	{
(0125) 		if (power > 255) power = 255;
    0BB5: 50 FF    MOV   A,0xFF
    0BB7: 13 FC    SUB   A,[X-4]
    0BB9: 52 FB    MOV   A,[X-5]
    0BBB: 31 80    XOR   A,0x80
    0BBD: 62 D0 00 MOV   REG[0xD0],0x0
    0BC0: 53 1B    MOV   [__rX],A
    0BC2: 50 80    MOV   A,0x80
    0BC4: 1A 1B    SBB   A,[__rX]
    0BC6: D0 07    JNC   0x0BCE
    0BC8: 56 FC FF MOV   [X-4],0xFF
    0BCB: 56 FB 00 MOV   [X-5],0x0
(0126) 		PWM8_RightFwd_COMPARE_REG = power;
    0BCE: 62 D0 00 MOV   REG[0xD0],0x0
    0BD1: 52 FC    MOV   A,[X-4]
    0BD3: 60 4A    MOV   REG[0x4A],A
(0127) 		PWM8_RightRev_COMPARE_REG = 0;
    0BD5: 62 42 00 MOV   REG[0x42],0x0
(0128) 	}
    0BD8: 80 20    JMP   0x0BF9
(0129) 	else
(0130) 	{
(0131) 		if (power < -255) power = -255;
    0BDA: 52 FC    MOV   A,[X-4]
    0BDC: 11 01    SUB   A,0x1
    0BDE: 52 FB    MOV   A,[X-5]
    0BE0: 31 80    XOR   A,0x80
    0BE2: 19 7F    SBB   A,0x7F
    0BE4: D0 07    JNC   0x0BEC
    0BE6: 56 FC 01 MOV   [X-4],0x1
    0BE9: 56 FB FF MOV   [X-5],0xFF
(0132) 		PWM8_RightFwd_COMPARE_REG = 0;
    0BEC: 62 4A 00 MOV   REG[0x4A],0x0
(0133) 		PWM8_RightRev_COMPARE_REG = -power;
    0BEF: 62 D0 00 MOV   REG[0xD0],0x0
    0BF2: 52 FC    MOV   A,[X-4]
    0BF4: 73       CPL   A
    0BF5: 11 FF    SUB   A,0xFF
    0BF7: 60 42    MOV   REG[0x42],A
(0134) 	}
    0BF9: 20       POP   X
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\sched.c
(0001) #include "sched.h"
(0002) 
(0003) char _schedTimerAdc;
(0004) char _schedTimerMotor;
(0005) char _schedTimerI2C;
(0006) char _schedTimerMotion;
(0007) 
(0008) char _schedQueue;
(0009) char _schedCycleQueue;
(0010) 
(0011) void Sched_Init(void)
(0012) {
(0013) 	_schedTimerAdc    = 0;
_Sched_Init:
    0BFB: 62 D0 00 MOV   REG[0xD0],0x0
    0BFE: 55 36 00 MOV   [_schedTimerAdc],0x0
(0014) 	_schedTimerMotor  = 0;
    0C01: 62 D0 00 MOV   REG[0xD0],0x0
    0C04: 55 35 00 MOV   [_schedTimerMotor],0x0
(0015) 	_schedTimerI2C    = 0;
    0C07: 62 D0 00 MOV   REG[0xD0],0x0
    0C0A: 55 34 00 MOV   [_schedTimerI2C],0x0
(0016) 	_schedTimerMotion = 0;
    0C0D: 62 D0 00 MOV   REG[0xD0],0x0
    0C10: 55 33 00 MOV   [_schedTimerMotion],0x0
(0017) 	
(0018) 	_schedQueue = 0;
    0C13: 62 D0 00 MOV   REG[0xD0],0x0
    0C16: 55 32 00 MOV   [_schedQueue],0x0
(0019) 	
(0020) 	Counter16_Tick_EnableInt_M;
    0C19: 43 E1 02 OR    REG[0xE1],0x2
(0021) 	Counter16_Tick_Start_M;
    0C1C: 43 23 01 OR    REG[0x23],0x1
    0C1F: 7F       RET   
(0022) }
(0023) 
(0024) void Sched_RunQueue(void)
(0025) {
(0026) 
(0027) 	Counter16_Tick_DisableInt_M;
_Sched_RunQueue:
    0C20: 41 E1 FD AND   REG[0xE1],0xFD
(0028) 	_schedCycleQueue = _schedQueue;  // Make a copy of the queue for this cycle
    0C23: 62 D0 00 MOV   REG[0xD0],0x0
    0C26: 51 32    MOV   A,[_schedQueue]
    0C28: 62 D0 00 MOV   REG[0xD0],0x0
    0C2B: 53 31    MOV   [_schedCycleQueue],A
(0029) 	_schedQueue = 0;                 // Empty the scheduler queue
    0C2D: 62 D0 00 MOV   REG[0xD0],0x0
    0C30: 55 32 00 MOV   [_schedQueue],0x0
(0030) 	Counter16_Tick_EnableInt_M;
    0C33: 43 E1 02 OR    REG[0xE1],0x2
(0031) 	
(0032) 	if (_schedCycleQueue == 0)
    0C36: 62 D0 00 MOV   REG[0xD0],0x0
    0C39: 3C 31 00 CMP   [_schedCycleQueue],0x0
    0C3C: B0 03    JNZ   0x0C40
(0033) 	{
(0034) 		// Run short unscheduled background tasks here
(0035) 		// e.g. maze filling
(0036) 	}
    0C3E: 80 30    JMP   0x0C6F
(0037) 	else
(0038) 	{
(0039) 		LED_Front_On();
    0C40: 41 08 FB AND   REG[0x8],0xFB
(0040) 		
(0041) 		// There is a scheduled task in the queue
(0042) 		if (_schedCycleQueue & SCHED_RUN_ADC)
    0C43: 62 D0 00 MOV   REG[0xD0],0x0
    0C46: 47 31 01 TST   [_schedCycleQueue],0x1
    0C49: A0 04    JZ    0x0C4E
(0043) 		{
(0044) 			// ADC module is scheduled to run this cycle
(0045) 			ADC_Update();
    0C4B: 7C 07 BD LCALL _ADC_Update
(0046) 		}
(0047) 		if (_schedCycleQueue & SCHED_RUN_MOTOR)
    0C4E: 62 D0 00 MOV   REG[0xD0],0x0
    0C51: 47 31 02 TST   [_schedCycleQueue],0x2
    0C54: A0 01    JZ    0x0C56
(0048) 		{
(0049) 			// Motor module is scheduled to run this cycle
(0050) 		}
(0051) 		if (_schedCycleQueue & SCHED_RUN_I2C)
    0C56: 62 D0 00 MOV   REG[0xD0],0x0
    0C59: 47 31 04 TST   [_schedCycleQueue],0x4
    0C5C: A0 04    JZ    0x0C61
(0052) 		{
(0053) 			// I2C module is scheduled to run this cycle
(0054) 			I2C_Update();
    0C5E: 7C 0D 05 LCALL _I2C_Update
(0055) 		}
(0056) 		if (_schedCycleQueue & SCHED_RUN_MOTION)
    0C61: 62 D0 00 MOV   REG[0xD0],0x0
    0C64: 47 31 08 TST   [_schedCycleQueue],0x8
    0C67: A0 04    JZ    0x0C6C
(0057) 		{
(0058) 			// Motion control module is scheduled to run this cycle
(0059) 			Motion_Update();
    0C69: 7C 09 7A LCALL _Motion_Update
(0060) 		}
(0061) 		
(0062) 		LED_Front_Off();
    0C6C: 43 08 04 OR    REG[0x8],0x4
(0063) 	}
    0C6F: 7F       RET   
(0064) }
(0065) 
(0066) void TICK_ISR(void)
(0067) {
_TICK_ISR:
    0C70: 71 C0    OR    F,0xC0
    0C72: 08       PUSH  A
    0C73: 5D D0    MOV   A,REG[0xD0]
    0C75: 08       PUSH  A
(0068) 	if (_schedTimerAdc == 0)
    0C76: 62 D0 00 MOV   REG[0xD0],0x0
    0C79: 3C 36 00 CMP   [_schedTimerAdc],0x0
    0C7C: B0 0D    JNZ   0x0C8A
(0069) 	{
(0070) 		_schedQueue |= SCHED_RUN_ADC;
    0C7E: 62 D0 00 MOV   REG[0xD0],0x0
    0C81: 2E 32 01 OR    [_schedQueue],0x1
(0071) 		_schedTimerAdc = (SCHED_PERIOD_ADC);
    0C84: 62 D0 00 MOV   REG[0xD0],0x0
    0C87: 55 36 04 MOV   [_schedTimerAdc],0x4
(0072) 	}
(0073) 	
(0074) 	if (_schedTimerMotor == 0)
    0C8A: 62 D0 00 MOV   REG[0xD0],0x0
    0C8D: 3C 35 00 CMP   [_schedTimerMotor],0x0
    0C90: B0 0D    JNZ   0x0C9E
(0075) 	{
(0076) 		_schedQueue |= SCHED_RUN_MOTOR;
    0C92: 62 D0 00 MOV   REG[0xD0],0x0
    0C95: 2E 32 02 OR    [_schedQueue],0x2
(0077) 		_schedTimerMotor = (SCHED_PERIOD_MOTOR);
    0C98: 62 D0 00 MOV   REG[0xD0],0x0
    0C9B: 55 35 0A MOV   [_schedTimerMotor],0xA
(0078) 	}
(0079) 	
(0080) 	if (_schedTimerI2C == 0)
    0C9E: 62 D0 00 MOV   REG[0xD0],0x0
    0CA1: 3C 34 00 CMP   [_schedTimerI2C],0x0
    0CA4: B0 0D    JNZ   0x0CB2
(0081) 	{
(0082) 		_schedQueue |= SCHED_RUN_I2C;
    0CA6: 62 D0 00 MOV   REG[0xD0],0x0
    0CA9: 2E 32 04 OR    [_schedQueue],0x4
(0083) 		_schedTimerI2C = (SCHED_PERIOD_I2C);
    0CAC: 62 D0 00 MOV   REG[0xD0],0x0
    0CAF: 55 34 20 MOV   [_schedTimerI2C],0x20
(0084) 	}
(0085) 	
(0086) 	if (_schedTimerMotion == 0)
    0CB2: 62 D0 00 MOV   REG[0xD0],0x0
    0CB5: 3C 33 00 CMP   [_schedTimerMotion],0x0
    0CB8: B0 0D    JNZ   0x0CC6
(0087) 	{
(0088) 		_schedQueue |= SCHED_RUN_MOTION;
    0CBA: 62 D0 00 MOV   REG[0xD0],0x0
    0CBD: 2E 32 08 OR    [_schedQueue],0x8
(0089) 		_schedTimerI2C = (SCHED_PERIOD_MOTION);
    0CC0: 62 D0 00 MOV   REG[0xD0],0x0
    0CC3: 55 34 05 MOV   [_schedTimerI2C],0x5
(0090) 	}
(0091) 	
(0092) 	_schedTimerAdc --;
    0CC6: 62 D0 00 MOV   REG[0xD0],0x0
    0CC9: 7A 36    DEC   [_schedTimerAdc]
(0093) 	_schedTimerMotor --;
    0CCB: 62 D0 00 MOV   REG[0xD0],0x0
    0CCE: 7A 35    DEC   [_schedTimerMotor]
(0094) 	_schedTimerI2C --;
    0CD0: 62 D0 00 MOV   REG[0xD0],0x0
    0CD3: 7A 34    DEC   [_schedTimerI2C]
(0095) 	_schedTimerMotion --;
    0CD5: 62 D0 00 MOV   REG[0xD0],0x0
    0CD8: 7A 33    DEC   [_schedTimerMotion]
    0CDA: 18       POP   A
    0CDB: 60 D0    MOV   REG[0xD0],A
    0CDD: 18       POP   A
    0CDE: 7E       RETI  
FILE: C:\Users\Kevin\Dropbox\PSOCDE~1\CY8C28~3\CY8C28~1\ui.c
(0001) #include "ui.h"
(0002) 
(0003) struct T_I2C_Regs
(0004) {
(0005)     int val0;
(0006)     int val1;
(0007)     int val2;
(0008) 	int val3;
(0009) 	char bar0;
(0010) 	char bar1;
(0011) 	char bar2;
(0012) } I2C_Regs;
(0013) 
(0014) void LED_Init(void)
(0015) {
(0016) 	LED_All_Off();
_LED_Init:
    0CDF: 43 04 08 OR    REG[0x4],0x8
    0CE2: 43 00 20 OR    REG[0x0],0x20
    0CE5: 43 08 04 OR    REG[0x8],0x4
    0CE8: 7F       RET   
(0017) }
(0018)                 
(0019) void I2C_Init(void)
(0020) {
(0021) 	EzI2Cs_SetRamBuffer(sizeof(I2C_Regs), 0, (char*)(&I2C_Regs));
_I2C_Init:
    0CE9: 10       PUSH  X
    0CEA: 50 00    MOV   A,0x0
    0CEC: 08       PUSH  A
    0CED: 50 0C    MOV   A,0xC
    0CEF: 08       PUSH  A
    0CF0: 50 00    MOV   A,0x0
    0CF2: 08       PUSH  A
    0CF3: 50 0B    MOV   A,0xB
    0CF5: 08       PUSH  A
    0CF6: 7C 07 94 LCALL _EzI2Cs_SetRamBuffer
    0CF9: 38 FC    ADD   SP,0xFC
(0022) 	EzI2Cs_SetAddr(I2C_SLAVE_ADDRESS);
    0CFB: 50 04    MOV   A,0x4
    0CFD: 7C 07 4E LCALL _EzI2Cs_SetAddr
(0023) 	EzI2Cs_Start();  // Turn on I2C
    0D00: 7C 07 1D LCALL _EzI2Cs_Start
    0D03: 20       POP   X
    0D04: 7F       RET   
(0024) }
(0025) 
(0026) void I2C_Update(void)
(0027) {
(0028) 	M8C_DisableGInt;
_I2C_Update:
    0D05: 70 FE    AND   F,0xFE
(0029) 	
(0030) 	I2C_Regs.val0 = encoderCount.left;
    0D07: 62 D0 00 MOV   REG[0xD0],0x0
    0D0A: 51 18    MOV   A,[encoderCount+1]
    0D0C: 08       PUSH  A
    0D0D: 51 17    MOV   A,[encoderCount]
    0D0F: 62 D0 00 MOV   REG[0xD0],0x0
    0D12: 53 0C    MOV   [I2C_Regs],A
    0D14: 18       POP   A
    0D15: 53 0D    MOV   [I2C_Regs+1],A
(0031) 	I2C_Regs.val1 = encoderCount.right;
    0D17: 62 D0 00 MOV   REG[0xD0],0x0
    0D1A: 51 1A    MOV   A,[encoderCount+3]
    0D1C: 08       PUSH  A
    0D1D: 51 19    MOV   A,[encoderCount+2]
    0D1F: 62 D0 00 MOV   REG[0xD0],0x0
    0D22: 53 0E    MOV   [I2C_Regs+2],A
    0D24: 18       POP   A
    0D25: 53 0F    MOV   [I2C_Regs+3],A
(0032) 	I2C_Regs.val2 = adcIRFront;
    0D27: 62 D0 00 MOV   REG[0xD0],0x0
    0D2A: 51 23    MOV   A,[adcIRFront+1]
    0D2C: 08       PUSH  A
    0D2D: 51 22    MOV   A,[adcIRFront]
    0D2F: 62 D0 00 MOV   REG[0xD0],0x0
    0D32: 53 10    MOV   [I2C_Regs+4],A
    0D34: 18       POP   A
    0D35: 53 11    MOV   [I2C_Regs+5],A
(0033) 	I2C_Regs.val3 = adcIRRight;
    0D37: 62 D0 00 MOV   REG[0xD0],0x0
    0D3A: 51 1F    MOV   A,[adcIRRight+1]
    0D3C: 08       PUSH  A
    0D3D: 51 1E    MOV   A,[adcIRRight]
    0D3F: 62 D0 00 MOV   REG[0xD0],0x0
    0D42: 53 12    MOV   [I2C_Regs+6],A
    0D44: 18       POP   A
    0D45: 53 13    MOV   [I2C_Regs+7],A
(0034) 	
(0035) 	I2C_Regs.bar0 = (char)(adcIRLeft / 32);
    0D47: 62 D0 00 MOV   REG[0xD0],0x0
    0D4A: 51 2D    MOV   A,[adcIRLeft+1]
    0D4C: 08       PUSH  A
    0D4D: 51 2C    MOV   A,[adcIRLeft]
    0D4F: 62 D0 00 MOV   REG[0xD0],0x0
    0D52: 53 1D    MOV   [__r0],A
    0D54: 18       POP   A
    0D55: 53 1C    MOV   [__r1],A
    0D57: 70 FB    AND   F,0xFB
    0D59: 6E 1D    RRC   [__r0]
    0D5B: 6E 1C    RRC   [__r1]
    0D5D: 70 FB    AND   F,0xFB
    0D5F: 6E 1D    RRC   [__r0]
    0D61: 6E 1C    RRC   [__r1]
    0D63: 70 FB    AND   F,0xFB
    0D65: 6E 1D    RRC   [__r0]
    0D67: 6E 1C    RRC   [__r1]
    0D69: 70 FB    AND   F,0xFB
    0D6B: 6E 1D    RRC   [__r0]
    0D6D: 6E 1C    RRC   [__r1]
    0D6F: 70 FB    AND   F,0xFB
    0D71: 6E 1D    RRC   [__r0]
    0D73: 6E 1C    RRC   [__r1]
    0D75: 51 1C    MOV   A,[__r1]
    0D77: 62 D0 00 MOV   REG[0xD0],0x0
    0D7A: 53 14    MOV   [I2C_Regs+8],A
(0036) 	I2C_Regs.bar1 = (char)(adcIRFront / 32);
    0D7C: 62 D0 00 MOV   REG[0xD0],0x0
    0D7F: 51 23    MOV   A,[adcIRFront+1]
    0D81: 08       PUSH  A
    0D82: 51 22    MOV   A,[adcIRFront]
    0D84: 62 D0 00 MOV   REG[0xD0],0x0
    0D87: 53 1D    MOV   [__r0],A
    0D89: 18       POP   A
    0D8A: 53 1C    MOV   [__r1],A
    0D8C: 70 FB    AND   F,0xFB
    0D8E: 6E 1D    RRC   [__r0]
    0D90: 6E 1C    RRC   [__r1]
    0D92: 70 FB    AND   F,0xFB
    0D94: 6E 1D    RRC   [__r0]
    0D96: 6E 1C    RRC   [__r1]
    0D98: 70 FB    AND   F,0xFB
    0D9A: 6E 1D    RRC   [__r0]
    0D9C: 6E 1C    RRC   [__r1]
    0D9E: 70 FB    AND   F,0xFB
    0DA0: 6E 1D    RRC   [__r0]
    0DA2: 6E 1C    RRC   [__r1]
    0DA4: 70 FB    AND   F,0xFB
    0DA6: 6E 1D    RRC   [__r0]
    0DA8: 6E 1C    RRC   [__r1]
    0DAA: 51 1C    MOV   A,[__r1]
    0DAC: 62 D0 00 MOV   REG[0xD0],0x0
    0DAF: 53 15    MOV   [I2C_Regs+9],A
(0037) 	I2C_Regs.bar2 = (char)(adcIRRight / 32);
    0DB1: 62 D0 00 MOV   REG[0xD0],0x0
    0DB4: 51 1F    MOV   A,[adcIRRight+1]
    0DB6: 08       PUSH  A
    0DB7: 51 1E    MOV   A,[adcIRRight]
    0DB9: 62 D0 00 MOV   REG[0xD0],0x0
    0DBC: 53 1D    MOV   [__r0],A
    0DBE: 18       POP   A
    0DBF: 53 1C    MOV   [__r1],A
    0DC1: 70 FB    AND   F,0xFB
    0DC3: 6E 1D    RRC   [__r0]
    0DC5: 6E 1C    RRC   [__r1]
    0DC7: 70 FB    AND   F,0xFB
    0DC9: 6E 1D    RRC   [__r0]
    0DCB: 6E 1C    RRC   [__r1]
    0DCD: 70 FB    AND   F,0xFB
    0DCF: 6E 1D    RRC   [__r0]
    0DD1: 6E 1C    RRC   [__r1]
    0DD3: 70 FB    AND   F,0xFB
    0DD5: 6E 1D    RRC   [__r0]
    0DD7: 6E 1C    RRC   [__r1]
    0DD9: 70 FB    AND   F,0xFB
    0DDB: 6E 1D    RRC   [__r0]
    0DDD: 6E 1C    RRC   [__r1]
    0DDF: 51 1C    MOV   A,[__r1]
    0DE1: 62 D0 00 MOV   REG[0xD0],0x0
    0DE4: 53 16    MOV   [I2C_Regs+10],A
(0038) 	
(0039) 	M8C_EnableGInt;
    0DE6: 71 01    OR    F,0x1
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0DE9: 7D 09 B6 LJMP  _GPIO_ISR          (0059) 	ljmp _GPIO_ISR
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0DEC: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
